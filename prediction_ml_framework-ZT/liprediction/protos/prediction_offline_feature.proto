/******************************************************************************
 *
 * Copyright Â© 2021 Li Auto Company. All rights reserved.
 *
 *****************************************************************************/

syntax = "proto2";

package artemis.prediction.prediction_offline_feature;

message Vec2d {
  optional double x = 1 [default = 0.0];
  optional double y = 2 [default = 0.0];
}

message Tensor {
  optional string name = 1;
  repeated float value = 2;
  repeated int32 shape = 3;
}

message PolylineInfo {
  enum PolylineType {
      UNSET = 0;
      Obstacle = 1;
      Lane = 2;
      LaneBoundary = 3;
      RoadBoundary = 4;
      Polygon = 5;
      Stopline = 6;
    }
  optional string polyline_id = 1;
  optional PolylineType type = 2;
}

message VecPoint {
  repeated Vec2d points = 1;
  optional PolylineInfo.PolylineType polyline_type = 2;
}

message LaneAction {
  optional int32 seq_num = 1;
  optional int32 state = 2;
}

message LaneActionList {
  optional string lane_id = 1;
  repeated LaneAction actions = 2;
}

message LaneVector {
  optional VecPoint vec = 1;
  optional float heading = 2; // map coordinate
  optional float speed_limit = 3;
  optional uint32 action = 4; // stop, go, ...
  optional bool is_virtual = 5; //
  optional uint32 stop_sign = 6; //
  optional uint32 lane_type = 7; //
}

message LaneBoundaryVector {
  optional VecPoint vec = 1;
  optional uint32 type = 2;
  optional float heading = 3;
  optional uint32 action = 4;
  optional uint32 stop_sign = 5;

}

message RoadBoundaryVector {
  optional VecPoint vec = 1;
  optional uint32 road_type = 2;
  optional uint32 boundary_edge_type = 3;
}

message PolygonVector {
  optional VecPoint vec = 1;
  optional int32 type = 2;
}

message StopLineVector {
  optional VecPoint vec = 1;
  optional uint32 color = 2;
}

message ObstacleVector {
  optional int32 seq_num = 1;
  optional float timestamp = 2;
  optional VecPoint vec = 3;
  optional Vec2d velocity = 4;
  optional Vec2d acc = 5;
  optional float dist_to_adc = 6; // distance to autonomous driving car
  optional float heading = 7;
  optional float length = 8;
  optional float width = 9;
  optional float height = 10;
  optional uint32 type = 11;
  optional float adc_theta = 12; // theta([-pi,pi)) of obstacle at adc_coordinate(right(x) front(y) up(z))
  optional bool is_interpolation_vec = 13; // this frame is generated by interpolate
  optional float speed = 14;
  optional float scalar_acc = 15;
}

message Segment {
  optional string segment_id = 1;
  repeated string predecessor = 2;
  repeated string successor = 3;
  repeated string left_neighbor = 4;
  repeated string right_neighbor = 5;
  optional int32 vector_start_idx = 6;
  optional int32 vector_end_idx = 7;
}

message LanePolyLine {
  optional string id = 1;
  repeated LaneVector lane_vector = 2; // ~1.5m
  repeated Segment segment_info = 3; // this polyline concat of many lanes
  repeated string successor = 4; // polyline relation
  repeated string predecessor = 5;
  repeated string left_neighbor = 6;
  repeated string right_neighbor = 7;
  optional double total_length = 8; // polyline length (sum of vectors) ~20m
}

message LaneBoundaryPolyLine {
  optional string id = 1;
  repeated LaneBoundaryVector lane_boundary_vec = 2;
  repeated Segment segment_info = 3; // this polyline concat of many lanes
}

message RoadBoundaryPolyLine {
  optional string id = 1;
  repeated RoadBoundaryVector road_boundary_vec = 2;
  repeated Segment segment_info = 3; // this polyline concat of many lanes
}

message PolygonPolyLine {
  optional string id = 1;
  repeated PolygonVector polygon_vec = 2;
}

message StopLinePolyLine {
  optional string id = 1;
  repeated StopLineVector stopline_vec = 2;
}

message StaticMapPolyLine {
  optional Vec2d origin = 1; // map origin (world coordinate)
  optional Vec2d adc_pos = 2; // adc origin (world coordinate)
  repeated LanePolyLine lanes = 4; // center line
  repeated LaneBoundaryPolyLine lane_boundarys = 5; // all the lane boundaries (no repeat)
  repeated RoadBoundaryPolyLine road_boundarys = 6; // all the road boundaries (no repeat)
  repeated PolygonPolyLine map_polylines = 7; // cross walk, speed bump, stop sign
}

message DynamicMapPolyLine {
  repeated StopLinePolyLine stoplines = 1;
  repeated LaneActionList lanes_actions = 2;
}

message Feature {
  optional int32 id = 1;
  optional int32 seq_num = 2;
  optional double timestamp = 3;
  optional Vec2d position = 4;
  optional double heading = 5;
  repeated PolylineInfo polyline_info = 6;
  repeated ObstacleVector obs_vec = 7; // [..., curr_frame-2, curr_frame-1, curr_frame]
  repeated ObstacleVector obs_future_vec = 8; // [curr_frame+1, curr_frame+2, ...]
}

// Sample
message FrameFeature {
  optional string scene_id = 1;
  optional int32 seq_num = 2;
  repeated Feature obstacle_features = 3;  // obstacle trajectory frame
  optional StaticMapPolyLine map_polyline = 4;  // local map of adc (world coordinate)
  optional DynamicMapPolyLine dynamic_polyline = 5;
  repeated Vec2d map_points = 6;
  optional int32 agent_id = 7;
  repeated int32 interaction_id = 8;
  repeated int32 predict_id = 9;
}

message Metadata{
  repeated string sample_name_list = 1; // all the sample this databse contains
}