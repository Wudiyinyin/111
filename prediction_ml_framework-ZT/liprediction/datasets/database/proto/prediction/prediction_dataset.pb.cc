// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction_dataset.proto

#include "prediction_dataset.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace artemis {
namespace proto {
namespace prediction {
namespace dataset {
constexpr ActorState::ActorState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pos_(nullptr)
  , vel_(nullptr)
  , shape_(nullptr)
  , time_us_(PROTOBUF_LONGLONG(0))
  , rot_(0)
  , omega_(0){}
struct ActorStateDefaultTypeInternal {
  constexpr ActorStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActorStateDefaultTypeInternal() {}
  union {
    ActorState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActorStateDefaultTypeInternal _ActorState_default_instance_;
constexpr Trajectory::Trajectory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : states_()
  , type_(0)

  , offset_(0){}
struct TrajectoryDefaultTypeInternal {
  constexpr TrajectoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrajectoryDefaultTypeInternal() {}
  union {
    Trajectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
constexpr Sequence::Sequence(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trajectories_()
  , region_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SequenceDefaultTypeInternal {
  constexpr SequenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SequenceDefaultTypeInternal() {}
  union {
    Sequence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SequenceDefaultTypeInternal _Sequence_default_instance_;
constexpr LaneNodeGlobalId::LaneNodeGlobalId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tile_id_(0)
  , item_id_(0)
  , segment_id_(0){}
struct LaneNodeGlobalIdDefaultTypeInternal {
  constexpr LaneNodeGlobalIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneNodeGlobalIdDefaultTypeInternal() {}
  union {
    LaneNodeGlobalId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneNodeGlobalIdDefaultTypeInternal _LaneNodeGlobalId_default_instance_;
constexpr LaneNodeAttribute::LaneNodeAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , end_(nullptr){}
struct LaneNodeAttributeDefaultTypeInternal {
  constexpr LaneNodeAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneNodeAttributeDefaultTypeInternal() {}
  union {
    LaneNodeAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneNodeAttributeDefaultTypeInternal _LaneNodeAttribute_default_instance_;
constexpr LaneNode::LaneNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : predecessors_()
  , _predecessors_cached_byte_size_()
  , successors_()
  , _successors_cached_byte_size_()
  , global_id_(nullptr)
  , attribute_(nullptr)
  , local_id_(0)
  , left_neighbour_(0)
  , right_neighbour_(0)
  , father_component_(0){}
struct LaneNodeDefaultTypeInternal {
  constexpr LaneNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneNodeDefaultTypeInternal() {}
  union {
    LaneNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneNodeDefaultTypeInternal _LaneNode_default_instance_;
constexpr LaneComponent::LaneComponent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : son_nodes_()
  , _son_nodes_cached_byte_size_()
  , predecessors_()
  , _predecessors_cached_byte_size_()
  , successors_()
  , _successors_cached_byte_size_()
  , id_(0){}
struct LaneComponentDefaultTypeInternal {
  constexpr LaneComponentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneComponentDefaultTypeInternal() {}
  union {
    LaneComponent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneComponentDefaultTypeInternal _LaneComponent_default_instance_;
constexpr LaneGraph::LaneGraph(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lane_nodes_()
  , lane_components_(){}
struct LaneGraphDefaultTypeInternal {
  constexpr LaneGraphDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneGraphDefaultTypeInternal() {}
  union {
    LaneGraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneGraphDefaultTypeInternal _LaneGraph_default_instance_;
constexpr Sample::Sample(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trajectories_()
  , lane_graph_(nullptr)
  , attention_(0)
  , intention_(0){}
struct SampleDefaultTypeInternal {
  constexpr SampleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SampleDefaultTypeInternal() {}
  union {
    Sample _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SampleDefaultTypeInternal _Sample_default_instance_;
constexpr Metadata::Metadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sequence_name_list_()
  , sample_name_list_(){}
struct MetadataDefaultTypeInternal {
  constexpr MetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetadataDefaultTypeInternal _Metadata_default_instance_;
}  // namespace dataset
}  // namespace prediction
}  // namespace proto
}  // namespace artemis
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_prediction_5fdataset_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_prediction_5fdataset_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_prediction_5fdataset_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_prediction_5fdataset_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::ActorState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::ActorState, time_us_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::ActorState, pos_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::ActorState, rot_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::ActorState, vel_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::ActorState, omega_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::ActorState, shape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::Trajectory, type_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::Trajectory, offset_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::Trajectory, states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::Sequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::Sequence, region_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::Sequence, trajectories_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneNodeGlobalId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneNodeGlobalId, tile_id_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneNodeGlobalId, item_id_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneNodeGlobalId, segment_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneNodeAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneNodeAttribute, start_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneNodeAttribute, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneNode, global_id_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneNode, local_id_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneNode, attribute_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneNode, predecessors_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneNode, successors_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneNode, left_neighbour_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneNode, right_neighbour_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneNode, father_component_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneComponent, id_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneComponent, son_nodes_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneComponent, predecessors_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneComponent, successors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneGraph, lane_nodes_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::LaneGraph, lane_components_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::Sample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::Sample, trajectories_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::Sample, lane_graph_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::Sample, attention_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::Sample, intention_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::Metadata, sequence_name_list_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::dataset::Metadata, sample_name_list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::artemis::proto::prediction::dataset::ActorState)},
  { 11, -1, sizeof(::artemis::proto::prediction::dataset::Trajectory)},
  { 19, -1, sizeof(::artemis::proto::prediction::dataset::Sequence)},
  { 26, -1, sizeof(::artemis::proto::prediction::dataset::LaneNodeGlobalId)},
  { 34, -1, sizeof(::artemis::proto::prediction::dataset::LaneNodeAttribute)},
  { 41, -1, sizeof(::artemis::proto::prediction::dataset::LaneNode)},
  { 54, -1, sizeof(::artemis::proto::prediction::dataset::LaneComponent)},
  { 63, -1, sizeof(::artemis::proto::prediction::dataset::LaneGraph)},
  { 70, -1, sizeof(::artemis::proto::prediction::dataset::Sample)},
  { 79, -1, sizeof(::artemis::proto::prediction::dataset::Metadata)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::dataset::_ActorState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::dataset::_Trajectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::dataset::_Sequence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::dataset::_LaneNodeGlobalId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::dataset::_LaneNodeAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::dataset::_LaneNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::dataset::_LaneComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::dataset::_LaneGraph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::dataset::_Sample_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::dataset::_Metadata_default_instance_),
};

const char descriptor_table_protodef_prediction_5fdataset_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030prediction_dataset.proto\022 artemis.prot"
  "o.prediction.dataset\032\016geometry.proto\"\335\001\n"
  "\nActorState\022\017\n\007time_us\030\001 \001(\003\0224\n\003pos\030\002 \001("
  "\0132\'.artemis.proto.prediction.math.Vector"
  "2f\022\013\n\003rot\030\003 \001(\002\0224\n\003vel\030\004 \001(\0132\'.artemis.p"
  "roto.prediction.math.Vector2f\022\r\n\005omega\030\005"
  " \001(\002\0226\n\005shape\030\006 \001(\0132\'.artemis.proto.pred"
  "iction.math.Vector2f\"\225\001\n\nTrajectory\0229\n\004t"
  "ype\030\001 \001(\0162+.artemis.proto.prediction.dat"
  "aset.ActorType\022\016\n\006offset\030\002 \001(\005\022<\n\006states"
  "\030\003 \003(\0132,.artemis.proto.prediction.datase"
  "t.ActorState\"^\n\010Sequence\022\016\n\006region\030\001 \001(\t"
  "\022B\n\014trajectories\030\002 \003(\0132,.artemis.proto.p"
  "rediction.dataset.Trajectory\"H\n\020LaneNode"
  "GlobalId\022\017\n\007tile_id\030\001 \001(\005\022\017\n\007item_id\030\002 \001"
  "(\005\022\022\n\nsegment_id\030\003 \001(\005\"\201\001\n\021LaneNodeAttri"
  "bute\0226\n\005start\030\001 \001(\0132\'.artemis.proto.pred"
  "iction.math.Vector2f\0224\n\003end\030\002 \001(\0132\'.arte"
  "mis.proto.prediction.math.Vector2f\"\240\002\n\010L"
  "aneNode\022E\n\tglobal_id\030\001 \001(\01322.artemis.pro"
  "to.prediction.dataset.LaneNodeGlobalId\022\020"
  "\n\010local_id\030\002 \001(\005\022F\n\tattribute\030\003 \001(\01323.ar"
  "temis.proto.prediction.dataset.LaneNodeA"
  "ttribute\022\024\n\014predecessors\030\004 \003(\005\022\022\n\nsucces"
  "sors\030\005 \003(\005\022\026\n\016left_neighbour\030\006 \001(\005\022\027\n\017ri"
  "ght_neighbour\030\007 \001(\005\022\030\n\020father_component\030"
  "\010 \001(\005\"X\n\rLaneComponent\022\n\n\002id\030\001 \001(\005\022\021\n\tso"
  "n_nodes\030\002 \003(\005\022\024\n\014predecessors\030\003 \003(\005\022\022\n\ns"
  "uccessors\030\004 \003(\005\"\225\001\n\tLaneGraph\022>\n\nlane_no"
  "des\030\001 \003(\0132*.artemis.proto.prediction.dat"
  "aset.LaneNode\022H\n\017lane_components\030\002 \003(\0132/"
  ".artemis.proto.prediction.dataset.LaneCo"
  "mponent\"\263\001\n\006Sample\022B\n\014trajectories\030\001 \003(\013"
  "2,.artemis.proto.prediction.dataset.Traj"
  "ectory\022\?\n\nlane_graph\030\002 \001(\0132+.artemis.pro"
  "to.prediction.dataset.LaneGraph\022\021\n\tatten"
  "tion\030\003 \001(\005\022\021\n\tintention\030\004 \001(\005\"@\n\010Metadat"
  "a\022\032\n\022sequence_name_list\030\001 \003(\t\022\030\n\020sample_"
  "name_list\030\002 \003(\t*@\n\tActorType\022\013\n\007Vehicle\020"
  "\000\022\013\n\007Bicycle\020\001\022\016\n\nPedestrain\020\002\022\t\n\005Other\020"
  "\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_prediction_5fdataset_2eproto_deps[1] = {
  &::descriptor_table_geometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_prediction_5fdataset_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prediction_5fdataset_2eproto = {
  false, false, 1609, descriptor_table_protodef_prediction_5fdataset_2eproto, "prediction_dataset.proto", 
  &descriptor_table_prediction_5fdataset_2eproto_once, descriptor_table_prediction_5fdataset_2eproto_deps, 1, 10,
  schemas, file_default_instances, TableStruct_prediction_5fdataset_2eproto::offsets,
  file_level_metadata_prediction_5fdataset_2eproto, file_level_enum_descriptors_prediction_5fdataset_2eproto, file_level_service_descriptors_prediction_5fdataset_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_prediction_5fdataset_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_prediction_5fdataset_2eproto);
  return descriptor_table_prediction_5fdataset_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_prediction_5fdataset_2eproto(&descriptor_table_prediction_5fdataset_2eproto);
namespace artemis {
namespace proto {
namespace prediction {
namespace dataset {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_prediction_5fdataset_2eproto);
  return file_level_enum_descriptors_prediction_5fdataset_2eproto[0];
}
bool ActorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ActorState::_Internal {
 public:
  static const ::artemis::proto::prediction::math::Vector2f& pos(const ActorState* msg);
  static const ::artemis::proto::prediction::math::Vector2f& vel(const ActorState* msg);
  static const ::artemis::proto::prediction::math::Vector2f& shape(const ActorState* msg);
};

const ::artemis::proto::prediction::math::Vector2f&
ActorState::_Internal::pos(const ActorState* msg) {
  return *msg->pos_;
}
const ::artemis::proto::prediction::math::Vector2f&
ActorState::_Internal::vel(const ActorState* msg) {
  return *msg->vel_;
}
const ::artemis::proto::prediction::math::Vector2f&
ActorState::_Internal::shape(const ActorState* msg) {
  return *msg->shape_;
}
void ActorState::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
void ActorState::clear_vel() {
  if (GetArena() == nullptr && vel_ != nullptr) {
    delete vel_;
  }
  vel_ = nullptr;
}
void ActorState::clear_shape() {
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
ActorState::ActorState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.dataset.ActorState)
}
ActorState::ActorState(const ActorState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::artemis::proto::prediction::math::Vector2f(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_vel()) {
    vel_ = new ::artemis::proto::prediction::math::Vector2f(*from.vel_);
  } else {
    vel_ = nullptr;
  }
  if (from._internal_has_shape()) {
    shape_ = new ::artemis::proto::prediction::math::Vector2f(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  ::memcpy(&time_us_, &from.time_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&omega_) -
    reinterpret_cast<char*>(&time_us_)) + sizeof(omega_));
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.dataset.ActorState)
}

void ActorState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&omega_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(omega_));
}

ActorState::~ActorState() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.dataset.ActorState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActorState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete vel_;
  if (this != internal_default_instance()) delete shape_;
}

void ActorState::ArenaDtor(void* object) {
  ActorState* _this = reinterpret_cast< ActorState* >(object);
  (void)_this;
}
void ActorState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActorState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActorState::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.dataset.ActorState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArena() == nullptr && vel_ != nullptr) {
    delete vel_;
  }
  vel_ = nullptr;
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  ::memset(&time_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&omega_) -
      reinterpret_cast<char*>(&time_us_)) + sizeof(omega_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActorState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .artemis.proto.prediction.math.Vector2f pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float rot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          rot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .artemis.proto.prediction.math.Vector2f vel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float omega = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          omega_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .artemis.proto.prediction.math.Vector2f shape = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.dataset.ActorState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time_us = 1;
  if (this->time_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time_us(), target);
  }

  // .artemis.proto.prediction.math.Vector2f pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // float rot = 3;
  if (!(this->rot() <= 0 && this->rot() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_rot(), target);
  }

  // .artemis.proto.prediction.math.Vector2f vel = 4;
  if (this->has_vel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vel(this), target, stream);
  }

  // float omega = 5;
  if (!(this->omega() <= 0 && this->omega() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_omega(), target);
  }

  // .artemis.proto.prediction.math.Vector2f shape = 6;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::shape(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.dataset.ActorState)
  return target;
}

size_t ActorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.dataset.ActorState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .artemis.proto.prediction.math.Vector2f pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .artemis.proto.prediction.math.Vector2f vel = 4;
  if (this->has_vel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_);
  }

  // .artemis.proto.prediction.math.Vector2f shape = 6;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // int64 time_us = 1;
  if (this->time_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_us());
  }

  // float rot = 3;
  if (!(this->rot() <= 0 && this->rot() >= 0)) {
    total_size += 1 + 4;
  }

  // float omega = 5;
  if (!(this->omega() <= 0 && this->omega() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActorState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.dataset.ActorState)
  GOOGLE_DCHECK_NE(&from, this);
  const ActorState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActorState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.dataset.ActorState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.dataset.ActorState)
    MergeFrom(*source);
  }
}

void ActorState::MergeFrom(const ActorState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.dataset.ActorState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::artemis::proto::prediction::math::Vector2f::MergeFrom(from._internal_pos());
  }
  if (from.has_vel()) {
    _internal_mutable_vel()->::artemis::proto::prediction::math::Vector2f::MergeFrom(from._internal_vel());
  }
  if (from.has_shape()) {
    _internal_mutable_shape()->::artemis::proto::prediction::math::Vector2f::MergeFrom(from._internal_shape());
  }
  if (from.time_us() != 0) {
    _internal_set_time_us(from._internal_time_us());
  }
  if (!(from.rot() <= 0 && from.rot() >= 0)) {
    _internal_set_rot(from._internal_rot());
  }
  if (!(from.omega() <= 0 && from.omega() >= 0)) {
    _internal_set_omega(from._internal_omega());
  }
}

void ActorState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.dataset.ActorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorState::CopyFrom(const ActorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.dataset.ActorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorState::IsInitialized() const {
  return true;
}

void ActorState::InternalSwap(ActorState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActorState, omega_)
      + sizeof(ActorState::omega_)
      - PROTOBUF_FIELD_OFFSET(ActorState, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Trajectory::_Internal {
 public:
};

Trajectory::Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.dataset.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      states_(from.states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&type_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.dataset.Trajectory)
}

void Trajectory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&type_)) + sizeof(offset_));
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.dataset.Trajectory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Trajectory::ArenaDtor(void* object) {
  Trajectory* _this = reinterpret_cast< Trajectory* >(object);
  (void)_this;
}
void Trajectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.dataset.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&type_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .artemis.proto.prediction.dataset.ActorType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::artemis::proto::prediction::dataset::ActorType>(val));
        } else goto handle_unusual;
        continue;
      // int32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .artemis.proto.prediction.dataset.ActorState states = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trajectory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.dataset.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .artemis.proto.prediction.dataset.ActorType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_offset(), target);
  }

  // repeated .artemis.proto.prediction.dataset.ActorState states = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.dataset.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.dataset.Trajectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .artemis.proto.prediction.dataset.ActorState states = 3;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .artemis.proto.prediction.dataset.ActorType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.dataset.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.dataset.Trajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.dataset.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.dataset.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void Trajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.dataset.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.dataset.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  states_.InternalSwap(&other->states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trajectory, offset_)
      + sizeof(Trajectory::offset_)
      - PROTOBUF_FIELD_OFFSET(Trajectory, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Sequence::_Internal {
 public:
};

Sequence::Sequence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trajectories_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.dataset.Sequence)
}
Sequence::Sequence(const Sequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trajectories_(from.trajectories_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_region().empty()) {
    region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_region(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.dataset.Sequence)
}

void Sequence::SharedCtor() {
region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Sequence::~Sequence() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.dataset.Sequence)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Sequence::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Sequence::ArenaDtor(void* object) {
  Sequence* _this = reinterpret_cast< Sequence* >(object);
  (void)_this;
}
void Sequence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Sequence::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.dataset.Sequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectories_.Clear();
  region_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sequence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artemis.proto.prediction.dataset.Sequence.region"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .artemis.proto.prediction.dataset.Trajectory trajectories = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sequence::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.dataset.Sequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string region = 1;
  if (this->region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artemis.proto.prediction.dataset.Sequence.region");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_region(), target);
  }

  // repeated .artemis.proto.prediction.dataset.Trajectory trajectories = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectories_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_trajectories(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.dataset.Sequence)
  return target;
}

size_t Sequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.dataset.Sequence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .artemis.proto.prediction.dataset.Trajectory trajectories = 2;
  total_size += 1UL * this->_internal_trajectories_size();
  for (const auto& msg : this->trajectories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string region = 1;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sequence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.dataset.Sequence)
  GOOGLE_DCHECK_NE(&from, this);
  const Sequence* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sequence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.dataset.Sequence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.dataset.Sequence)
    MergeFrom(*source);
  }
}

void Sequence::MergeFrom(const Sequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.dataset.Sequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectories_.MergeFrom(from.trajectories_);
  if (from.region().size() > 0) {
    _internal_set_region(from._internal_region());
  }
}

void Sequence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.dataset.Sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sequence::CopyFrom(const Sequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.dataset.Sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sequence::IsInitialized() const {
  return true;
}

void Sequence::InternalSwap(Sequence* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trajectories_.InternalSwap(&other->trajectories_);
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Sequence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LaneNodeGlobalId::_Internal {
 public:
};

LaneNodeGlobalId::LaneNodeGlobalId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.dataset.LaneNodeGlobalId)
}
LaneNodeGlobalId::LaneNodeGlobalId(const LaneNodeGlobalId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tile_id_, &from.tile_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&segment_id_) -
    reinterpret_cast<char*>(&tile_id_)) + sizeof(segment_id_));
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.dataset.LaneNodeGlobalId)
}

void LaneNodeGlobalId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tile_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&segment_id_) -
    reinterpret_cast<char*>(&tile_id_)) + sizeof(segment_id_));
}

LaneNodeGlobalId::~LaneNodeGlobalId() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.dataset.LaneNodeGlobalId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneNodeGlobalId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LaneNodeGlobalId::ArenaDtor(void* object) {
  LaneNodeGlobalId* _this = reinterpret_cast< LaneNodeGlobalId* >(object);
  (void)_this;
}
void LaneNodeGlobalId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneNodeGlobalId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneNodeGlobalId::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.dataset.LaneNodeGlobalId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tile_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&segment_id_) -
      reinterpret_cast<char*>(&tile_id_)) + sizeof(segment_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneNodeGlobalId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 tile_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tile_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 segment_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          segment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneNodeGlobalId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.dataset.LaneNodeGlobalId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tile_id = 1;
  if (this->tile_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tile_id(), target);
  }

  // int32 item_id = 2;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_id(), target);
  }

  // int32 segment_id = 3;
  if (this->segment_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_segment_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.dataset.LaneNodeGlobalId)
  return target;
}

size_t LaneNodeGlobalId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.dataset.LaneNodeGlobalId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 tile_id = 1;
  if (this->tile_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tile_id());
  }

  // int32 item_id = 2;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_id());
  }

  // int32 segment_id = 3;
  if (this->segment_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_segment_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneNodeGlobalId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.dataset.LaneNodeGlobalId)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneNodeGlobalId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneNodeGlobalId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.dataset.LaneNodeGlobalId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.dataset.LaneNodeGlobalId)
    MergeFrom(*source);
  }
}

void LaneNodeGlobalId::MergeFrom(const LaneNodeGlobalId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.dataset.LaneNodeGlobalId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tile_id() != 0) {
    _internal_set_tile_id(from._internal_tile_id());
  }
  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from.segment_id() != 0) {
    _internal_set_segment_id(from._internal_segment_id());
  }
}

void LaneNodeGlobalId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.dataset.LaneNodeGlobalId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneNodeGlobalId::CopyFrom(const LaneNodeGlobalId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.dataset.LaneNodeGlobalId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneNodeGlobalId::IsInitialized() const {
  return true;
}

void LaneNodeGlobalId::InternalSwap(LaneNodeGlobalId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneNodeGlobalId, segment_id_)
      + sizeof(LaneNodeGlobalId::segment_id_)
      - PROTOBUF_FIELD_OFFSET(LaneNodeGlobalId, tile_id_)>(
          reinterpret_cast<char*>(&tile_id_),
          reinterpret_cast<char*>(&other->tile_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneNodeGlobalId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LaneNodeAttribute::_Internal {
 public:
  static const ::artemis::proto::prediction::math::Vector2f& start(const LaneNodeAttribute* msg);
  static const ::artemis::proto::prediction::math::Vector2f& end(const LaneNodeAttribute* msg);
};

const ::artemis::proto::prediction::math::Vector2f&
LaneNodeAttribute::_Internal::start(const LaneNodeAttribute* msg) {
  return *msg->start_;
}
const ::artemis::proto::prediction::math::Vector2f&
LaneNodeAttribute::_Internal::end(const LaneNodeAttribute* msg) {
  return *msg->end_;
}
void LaneNodeAttribute::clear_start() {
  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
void LaneNodeAttribute::clear_end() {
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
LaneNodeAttribute::LaneNodeAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.dataset.LaneNodeAttribute)
}
LaneNodeAttribute::LaneNodeAttribute(const LaneNodeAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::artemis::proto::prediction::math::Vector2f(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::artemis::proto::prediction::math::Vector2f(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.dataset.LaneNodeAttribute)
}

void LaneNodeAttribute::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

LaneNodeAttribute::~LaneNodeAttribute() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.dataset.LaneNodeAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneNodeAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void LaneNodeAttribute::ArenaDtor(void* object) {
  LaneNodeAttribute* _this = reinterpret_cast< LaneNodeAttribute* >(object);
  (void)_this;
}
void LaneNodeAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneNodeAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneNodeAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.dataset.LaneNodeAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneNodeAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .artemis.proto.prediction.math.Vector2f start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .artemis.proto.prediction.math.Vector2f end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneNodeAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.dataset.LaneNodeAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .artemis.proto.prediction.math.Vector2f start = 1;
  if (this->has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // .artemis.proto.prediction.math.Vector2f end = 2;
  if (this->has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.dataset.LaneNodeAttribute)
  return target;
}

size_t LaneNodeAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.dataset.LaneNodeAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .artemis.proto.prediction.math.Vector2f start = 1;
  if (this->has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .artemis.proto.prediction.math.Vector2f end = 2;
  if (this->has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneNodeAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.dataset.LaneNodeAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneNodeAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneNodeAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.dataset.LaneNodeAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.dataset.LaneNodeAttribute)
    MergeFrom(*source);
  }
}

void LaneNodeAttribute::MergeFrom(const LaneNodeAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.dataset.LaneNodeAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start()) {
    _internal_mutable_start()->::artemis::proto::prediction::math::Vector2f::MergeFrom(from._internal_start());
  }
  if (from.has_end()) {
    _internal_mutable_end()->::artemis::proto::prediction::math::Vector2f::MergeFrom(from._internal_end());
  }
}

void LaneNodeAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.dataset.LaneNodeAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneNodeAttribute::CopyFrom(const LaneNodeAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.dataset.LaneNodeAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneNodeAttribute::IsInitialized() const {
  return true;
}

void LaneNodeAttribute::InternalSwap(LaneNodeAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneNodeAttribute, end_)
      + sizeof(LaneNodeAttribute::end_)
      - PROTOBUF_FIELD_OFFSET(LaneNodeAttribute, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneNodeAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LaneNode::_Internal {
 public:
  static const ::artemis::proto::prediction::dataset::LaneNodeGlobalId& global_id(const LaneNode* msg);
  static const ::artemis::proto::prediction::dataset::LaneNodeAttribute& attribute(const LaneNode* msg);
};

const ::artemis::proto::prediction::dataset::LaneNodeGlobalId&
LaneNode::_Internal::global_id(const LaneNode* msg) {
  return *msg->global_id_;
}
const ::artemis::proto::prediction::dataset::LaneNodeAttribute&
LaneNode::_Internal::attribute(const LaneNode* msg) {
  return *msg->attribute_;
}
LaneNode::LaneNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  predecessors_(arena),
  successors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.dataset.LaneNode)
}
LaneNode::LaneNode(const LaneNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      predecessors_(from.predecessors_),
      successors_(from.successors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_global_id()) {
    global_id_ = new ::artemis::proto::prediction::dataset::LaneNodeGlobalId(*from.global_id_);
  } else {
    global_id_ = nullptr;
  }
  if (from._internal_has_attribute()) {
    attribute_ = new ::artemis::proto::prediction::dataset::LaneNodeAttribute(*from.attribute_);
  } else {
    attribute_ = nullptr;
  }
  ::memcpy(&local_id_, &from.local_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&father_component_) -
    reinterpret_cast<char*>(&local_id_)) + sizeof(father_component_));
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.dataset.LaneNode)
}

void LaneNode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&global_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&father_component_) -
    reinterpret_cast<char*>(&global_id_)) + sizeof(father_component_));
}

LaneNode::~LaneNode() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.dataset.LaneNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete global_id_;
  if (this != internal_default_instance()) delete attribute_;
}

void LaneNode::ArenaDtor(void* object) {
  LaneNode* _this = reinterpret_cast< LaneNode* >(object);
  (void)_this;
}
void LaneNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneNode::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.dataset.LaneNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predecessors_.Clear();
  successors_.Clear();
  if (GetArena() == nullptr && global_id_ != nullptr) {
    delete global_id_;
  }
  global_id_ = nullptr;
  if (GetArena() == nullptr && attribute_ != nullptr) {
    delete attribute_;
  }
  attribute_ = nullptr;
  ::memset(&local_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&father_component_) -
      reinterpret_cast<char*>(&local_id_)) + sizeof(father_component_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .artemis.proto.prediction.dataset.LaneNodeGlobalId global_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 local_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          local_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .artemis.proto.prediction.dataset.LaneNodeAttribute attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attribute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 predecessors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_predecessors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_predecessors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 successors = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_successors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_successors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 left_neighbour = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          left_neighbour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 right_neighbour = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          right_neighbour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 father_component = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          father_component_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.dataset.LaneNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .artemis.proto.prediction.dataset.LaneNodeGlobalId global_id = 1;
  if (this->has_global_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::global_id(this), target, stream);
  }

  // int32 local_id = 2;
  if (this->local_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_local_id(), target);
  }

  // .artemis.proto.prediction.dataset.LaneNodeAttribute attribute = 3;
  if (this->has_attribute()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::attribute(this), target, stream);
  }

  // repeated int32 predecessors = 4;
  {
    int byte_size = _predecessors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_predecessors(), byte_size, target);
    }
  }

  // repeated int32 successors = 5;
  {
    int byte_size = _successors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_successors(), byte_size, target);
    }
  }

  // int32 left_neighbour = 6;
  if (this->left_neighbour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_left_neighbour(), target);
  }

  // int32 right_neighbour = 7;
  if (this->right_neighbour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_right_neighbour(), target);
  }

  // int32 father_component = 8;
  if (this->father_component() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_father_component(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.dataset.LaneNode)
  return target;
}

size_t LaneNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.dataset.LaneNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 predecessors = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->predecessors_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _predecessors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 successors = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->successors_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _successors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .artemis.proto.prediction.dataset.LaneNodeGlobalId global_id = 1;
  if (this->has_global_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *global_id_);
  }

  // .artemis.proto.prediction.dataset.LaneNodeAttribute attribute = 3;
  if (this->has_attribute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attribute_);
  }

  // int32 local_id = 2;
  if (this->local_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_local_id());
  }

  // int32 left_neighbour = 6;
  if (this->left_neighbour() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_left_neighbour());
  }

  // int32 right_neighbour = 7;
  if (this->right_neighbour() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_right_neighbour());
  }

  // int32 father_component = 8;
  if (this->father_component() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_father_component());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.dataset.LaneNode)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.dataset.LaneNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.dataset.LaneNode)
    MergeFrom(*source);
  }
}

void LaneNode::MergeFrom(const LaneNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.dataset.LaneNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predecessors_.MergeFrom(from.predecessors_);
  successors_.MergeFrom(from.successors_);
  if (from.has_global_id()) {
    _internal_mutable_global_id()->::artemis::proto::prediction::dataset::LaneNodeGlobalId::MergeFrom(from._internal_global_id());
  }
  if (from.has_attribute()) {
    _internal_mutable_attribute()->::artemis::proto::prediction::dataset::LaneNodeAttribute::MergeFrom(from._internal_attribute());
  }
  if (from.local_id() != 0) {
    _internal_set_local_id(from._internal_local_id());
  }
  if (from.left_neighbour() != 0) {
    _internal_set_left_neighbour(from._internal_left_neighbour());
  }
  if (from.right_neighbour() != 0) {
    _internal_set_right_neighbour(from._internal_right_neighbour());
  }
  if (from.father_component() != 0) {
    _internal_set_father_component(from._internal_father_component());
  }
}

void LaneNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.dataset.LaneNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneNode::CopyFrom(const LaneNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.dataset.LaneNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneNode::IsInitialized() const {
  return true;
}

void LaneNode::InternalSwap(LaneNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  predecessors_.InternalSwap(&other->predecessors_);
  successors_.InternalSwap(&other->successors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneNode, father_component_)
      + sizeof(LaneNode::father_component_)
      - PROTOBUF_FIELD_OFFSET(LaneNode, global_id_)>(
          reinterpret_cast<char*>(&global_id_),
          reinterpret_cast<char*>(&other->global_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LaneComponent::_Internal {
 public:
};

LaneComponent::LaneComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  son_nodes_(arena),
  predecessors_(arena),
  successors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.dataset.LaneComponent)
}
LaneComponent::LaneComponent(const LaneComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      son_nodes_(from.son_nodes_),
      predecessors_(from.predecessors_),
      successors_(from.successors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.dataset.LaneComponent)
}

void LaneComponent::SharedCtor() {
id_ = 0;
}

LaneComponent::~LaneComponent() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.dataset.LaneComponent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LaneComponent::ArenaDtor(void* object) {
  LaneComponent* _this = reinterpret_cast< LaneComponent* >(object);
  (void)_this;
}
void LaneComponent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.dataset.LaneComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  son_nodes_.Clear();
  predecessors_.Clear();
  successors_.Clear();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 son_nodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_son_nodes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_son_nodes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 predecessors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_predecessors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_predecessors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 successors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_successors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_successors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneComponent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.dataset.LaneComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated int32 son_nodes = 2;
  {
    int byte_size = _son_nodes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_son_nodes(), byte_size, target);
    }
  }

  // repeated int32 predecessors = 3;
  {
    int byte_size = _predecessors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_predecessors(), byte_size, target);
    }
  }

  // repeated int32 successors = 4;
  {
    int byte_size = _successors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_successors(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.dataset.LaneComponent)
  return target;
}

size_t LaneComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.dataset.LaneComponent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 son_nodes = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->son_nodes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _son_nodes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 predecessors = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->predecessors_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _predecessors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 successors = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->successors_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _successors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.dataset.LaneComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.dataset.LaneComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.dataset.LaneComponent)
    MergeFrom(*source);
  }
}

void LaneComponent::MergeFrom(const LaneComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.dataset.LaneComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  son_nodes_.MergeFrom(from.son_nodes_);
  predecessors_.MergeFrom(from.predecessors_);
  successors_.MergeFrom(from.successors_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void LaneComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.dataset.LaneComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneComponent::CopyFrom(const LaneComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.dataset.LaneComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneComponent::IsInitialized() const {
  return true;
}

void LaneComponent::InternalSwap(LaneComponent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  son_nodes_.InternalSwap(&other->son_nodes_);
  predecessors_.InternalSwap(&other->predecessors_);
  successors_.InternalSwap(&other->successors_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LaneGraph::_Internal {
 public:
};

LaneGraph::LaneGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lane_nodes_(arena),
  lane_components_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.dataset.LaneGraph)
}
LaneGraph::LaneGraph(const LaneGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lane_nodes_(from.lane_nodes_),
      lane_components_(from.lane_components_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.dataset.LaneGraph)
}

void LaneGraph::SharedCtor() {
}

LaneGraph::~LaneGraph() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.dataset.LaneGraph)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LaneGraph::ArenaDtor(void* object) {
  LaneGraph* _this = reinterpret_cast< LaneGraph* >(object);
  (void)_this;
}
void LaneGraph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.dataset.LaneGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_nodes_.Clear();
  lane_components_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .artemis.proto.prediction.dataset.LaneNode lane_nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .artemis.proto.prediction.dataset.LaneComponent lane_components = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneGraph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.dataset.LaneGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .artemis.proto.prediction.dataset.LaneNode lane_nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lane_nodes(i), target, stream);
  }

  // repeated .artemis.proto.prediction.dataset.LaneComponent lane_components = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_components_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_lane_components(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.dataset.LaneGraph)
  return target;
}

size_t LaneGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.dataset.LaneGraph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .artemis.proto.prediction.dataset.LaneNode lane_nodes = 1;
  total_size += 1UL * this->_internal_lane_nodes_size();
  for (const auto& msg : this->lane_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .artemis.proto.prediction.dataset.LaneComponent lane_components = 2;
  total_size += 1UL * this->_internal_lane_components_size();
  for (const auto& msg : this->lane_components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneGraph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.dataset.LaneGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneGraph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneGraph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.dataset.LaneGraph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.dataset.LaneGraph)
    MergeFrom(*source);
  }
}

void LaneGraph::MergeFrom(const LaneGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.dataset.LaneGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_nodes_.MergeFrom(from.lane_nodes_);
  lane_components_.MergeFrom(from.lane_components_);
}

void LaneGraph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.dataset.LaneGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneGraph::CopyFrom(const LaneGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.dataset.LaneGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneGraph::IsInitialized() const {
  return true;
}

void LaneGraph::InternalSwap(LaneGraph* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lane_nodes_.InternalSwap(&other->lane_nodes_);
  lane_components_.InternalSwap(&other->lane_components_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneGraph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Sample::_Internal {
 public:
  static const ::artemis::proto::prediction::dataset::LaneGraph& lane_graph(const Sample* msg);
};

const ::artemis::proto::prediction::dataset::LaneGraph&
Sample::_Internal::lane_graph(const Sample* msg) {
  return *msg->lane_graph_;
}
Sample::Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trajectories_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.dataset.Sample)
}
Sample::Sample(const Sample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trajectories_(from.trajectories_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lane_graph()) {
    lane_graph_ = new ::artemis::proto::prediction::dataset::LaneGraph(*from.lane_graph_);
  } else {
    lane_graph_ = nullptr;
  }
  ::memcpy(&attention_, &from.attention_,
    static_cast<size_t>(reinterpret_cast<char*>(&intention_) -
    reinterpret_cast<char*>(&attention_)) + sizeof(intention_));
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.dataset.Sample)
}

void Sample::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lane_graph_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&intention_) -
    reinterpret_cast<char*>(&lane_graph_)) + sizeof(intention_));
}

Sample::~Sample() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.dataset.Sample)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Sample::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lane_graph_;
}

void Sample::ArenaDtor(void* object) {
  Sample* _this = reinterpret_cast< Sample* >(object);
  (void)_this;
}
void Sample::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.dataset.Sample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectories_.Clear();
  if (GetArena() == nullptr && lane_graph_ != nullptr) {
    delete lane_graph_;
  }
  lane_graph_ = nullptr;
  ::memset(&attention_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intention_) -
      reinterpret_cast<char*>(&attention_)) + sizeof(intention_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .artemis.proto.prediction.dataset.Trajectory trajectories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .artemis.proto.prediction.dataset.LaneGraph lane_graph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attention = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          attention_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 intention = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          intention_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sample::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.dataset.Sample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .artemis.proto.prediction.dataset.Trajectory trajectories = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectories_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trajectories(i), target, stream);
  }

  // .artemis.proto.prediction.dataset.LaneGraph lane_graph = 2;
  if (this->has_lane_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lane_graph(this), target, stream);
  }

  // int32 attention = 3;
  if (this->attention() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_attention(), target);
  }

  // int32 intention = 4;
  if (this->intention() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_intention(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.dataset.Sample)
  return target;
}

size_t Sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.dataset.Sample)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .artemis.proto.prediction.dataset.Trajectory trajectories = 1;
  total_size += 1UL * this->_internal_trajectories_size();
  for (const auto& msg : this->trajectories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .artemis.proto.prediction.dataset.LaneGraph lane_graph = 2;
  if (this->has_lane_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lane_graph_);
  }

  // int32 attention = 3;
  if (this->attention() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attention());
  }

  // int32 intention = 4;
  if (this->intention() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_intention());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sample::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.dataset.Sample)
  GOOGLE_DCHECK_NE(&from, this);
  const Sample* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sample>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.dataset.Sample)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.dataset.Sample)
    MergeFrom(*source);
  }
}

void Sample::MergeFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.dataset.Sample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectories_.MergeFrom(from.trajectories_);
  if (from.has_lane_graph()) {
    _internal_mutable_lane_graph()->::artemis::proto::prediction::dataset::LaneGraph::MergeFrom(from._internal_lane_graph());
  }
  if (from.attention() != 0) {
    _internal_set_attention(from._internal_attention());
  }
  if (from.intention() != 0) {
    _internal_set_intention(from._internal_intention());
  }
}

void Sample::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.dataset.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample::CopyFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.dataset.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample::IsInitialized() const {
  return true;
}

void Sample::InternalSwap(Sample* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trajectories_.InternalSwap(&other->trajectories_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sample, intention_)
      + sizeof(Sample::intention_)
      - PROTOBUF_FIELD_OFFSET(Sample, lane_graph_)>(
          reinterpret_cast<char*>(&lane_graph_),
          reinterpret_cast<char*>(&other->lane_graph_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sample::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Metadata::_Internal {
 public:
};

Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sequence_name_list_(arena),
  sample_name_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.dataset.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sequence_name_list_(from.sequence_name_list_),
      sample_name_list_(from.sample_name_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.dataset.Metadata)
}

void Metadata::SharedCtor() {
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.dataset.Metadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Metadata::ArenaDtor(void* object) {
  Metadata* _this = reinterpret_cast< Metadata* >(object);
  (void)_this;
}
void Metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.dataset.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_name_list_.Clear();
  sample_name_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string sequence_name_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sequence_name_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artemis.proto.prediction.dataset.Metadata.sequence_name_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string sample_name_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sample_name_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artemis.proto.prediction.dataset.Metadata.sample_name_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.dataset.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string sequence_name_list = 1;
  for (int i = 0, n = this->_internal_sequence_name_list_size(); i < n; i++) {
    const auto& s = this->_internal_sequence_name_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artemis.proto.prediction.dataset.Metadata.sequence_name_list");
    target = stream->WriteString(1, s, target);
  }

  // repeated string sample_name_list = 2;
  for (int i = 0, n = this->_internal_sample_name_list_size(); i < n; i++) {
    const auto& s = this->_internal_sample_name_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artemis.proto.prediction.dataset.Metadata.sample_name_list");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.dataset.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.dataset.Metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sequence_name_list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sequence_name_list_.size());
  for (int i = 0, n = sequence_name_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sequence_name_list_.Get(i));
  }

  // repeated string sample_name_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sample_name_list_.size());
  for (int i = 0, n = sample_name_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sample_name_list_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.dataset.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  const Metadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Metadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.dataset.Metadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.dataset.Metadata)
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.dataset.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sequence_name_list_.MergeFrom(from.sequence_name_list_);
  sample_name_list_.MergeFrom(from.sample_name_list_);
}

void Metadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.dataset.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.dataset.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sequence_name_list_.InternalSwap(&other->sequence_name_list_);
  sample_name_list_.InternalSwap(&other->sample_name_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dataset
}  // namespace prediction
}  // namespace proto
}  // namespace artemis
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::dataset::ActorState* Arena::CreateMaybeMessage< ::artemis::proto::prediction::dataset::ActorState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::dataset::ActorState >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::dataset::Trajectory* Arena::CreateMaybeMessage< ::artemis::proto::prediction::dataset::Trajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::dataset::Trajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::dataset::Sequence* Arena::CreateMaybeMessage< ::artemis::proto::prediction::dataset::Sequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::dataset::Sequence >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::dataset::LaneNodeGlobalId* Arena::CreateMaybeMessage< ::artemis::proto::prediction::dataset::LaneNodeGlobalId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::dataset::LaneNodeGlobalId >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::dataset::LaneNodeAttribute* Arena::CreateMaybeMessage< ::artemis::proto::prediction::dataset::LaneNodeAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::dataset::LaneNodeAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::dataset::LaneNode* Arena::CreateMaybeMessage< ::artemis::proto::prediction::dataset::LaneNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::dataset::LaneNode >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::dataset::LaneComponent* Arena::CreateMaybeMessage< ::artemis::proto::prediction::dataset::LaneComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::dataset::LaneComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::dataset::LaneGraph* Arena::CreateMaybeMessage< ::artemis::proto::prediction::dataset::LaneGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::dataset::LaneGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::dataset::Sample* Arena::CreateMaybeMessage< ::artemis::proto::prediction::dataset::Sample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::dataset::Sample >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::dataset::Metadata* Arena::CreateMaybeMessage< ::artemis::proto::prediction::dataset::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::dataset::Metadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
