// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry.proto

#include "geometry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace artemis {
namespace proto {
namespace prediction {
namespace math {
constexpr Vector3i::Vector3i(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(PROTOBUF_LONGLONG(0))
  , y_(PROTOBUF_LONGLONG(0))
  , z_(PROTOBUF_LONGLONG(0)){}
struct Vector3iDefaultTypeInternal {
  constexpr Vector3iDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector3iDefaultTypeInternal() {}
  union {
    Vector3i _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector3iDefaultTypeInternal _Vector3i_default_instance_;
constexpr Polyline::Polyline(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_(){}
struct PolylineDefaultTypeInternal {
  constexpr PolylineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolylineDefaultTypeInternal() {}
  union {
    Polyline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolylineDefaultTypeInternal _Polyline_default_instance_;
constexpr Polygon::Polygon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_(){}
struct PolygonDefaultTypeInternal {
  constexpr PolygonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolygonDefaultTypeInternal() {}
  union {
    Polygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolygonDefaultTypeInternal _Polygon_default_instance_;
constexpr Points::Points(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_(){}
struct PointsDefaultTypeInternal {
  constexpr PointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointsDefaultTypeInternal() {}
  union {
    Points _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointsDefaultTypeInternal _Points_default_instance_;
constexpr Vector2d::Vector2d(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct Vector2dDefaultTypeInternal {
  constexpr Vector2dDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector2dDefaultTypeInternal() {}
  union {
    Vector2d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector2dDefaultTypeInternal _Vector2d_default_instance_;
constexpr Vector2f::Vector2f(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct Vector2fDefaultTypeInternal {
  constexpr Vector2fDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector2fDefaultTypeInternal() {}
  union {
    Vector2f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector2fDefaultTypeInternal _Vector2f_default_instance_;
constexpr Vector3d::Vector3d(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vector3dDefaultTypeInternal {
  constexpr Vector3dDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector3dDefaultTypeInternal() {}
  union {
    Vector3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector3dDefaultTypeInternal _Vector3d_default_instance_;
constexpr Vector3f::Vector3f(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vector3fDefaultTypeInternal {
  constexpr Vector3fDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector3fDefaultTypeInternal() {}
  union {
    Vector3f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector3fDefaultTypeInternal _Vector3f_default_instance_;
constexpr Matrix2d::Matrix2d(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : e00_(0)
  , e01_(0)
  , e10_(0)
  , e11_(0){}
struct Matrix2dDefaultTypeInternal {
  constexpr Matrix2dDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Matrix2dDefaultTypeInternal() {}
  union {
    Matrix2d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Matrix2dDefaultTypeInternal _Matrix2d_default_instance_;
constexpr Matrix2f::Matrix2f(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : e00_(0)
  , e01_(0)
  , e10_(0)
  , e11_(0){}
struct Matrix2fDefaultTypeInternal {
  constexpr Matrix2fDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Matrix2fDefaultTypeInternal() {}
  union {
    Matrix2f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Matrix2fDefaultTypeInternal _Matrix2f_default_instance_;
constexpr Matrix3d::Matrix3d(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : e00_(0)
  , e01_(0)
  , e02_(0)
  , e10_(0)
  , e11_(0)
  , e12_(0)
  , e20_(0)
  , e21_(0)
  , e22_(0){}
struct Matrix3dDefaultTypeInternal {
  constexpr Matrix3dDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Matrix3dDefaultTypeInternal() {}
  union {
    Matrix3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Matrix3dDefaultTypeInternal _Matrix3d_default_instance_;
constexpr Matrix3f::Matrix3f(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : e00_(0)
  , e01_(0)
  , e02_(0)
  , e10_(0)
  , e11_(0)
  , e12_(0)
  , e20_(0)
  , e21_(0)
  , e22_(0){}
struct Matrix3fDefaultTypeInternal {
  constexpr Matrix3fDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Matrix3fDefaultTypeInternal() {}
  union {
    Matrix3f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Matrix3fDefaultTypeInternal _Matrix3f_default_instance_;
constexpr Quaterniond::Quaterniond(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : w_(0)
  , x_(0)
  , y_(0)
  , z_(0){}
struct QuaterniondDefaultTypeInternal {
  constexpr QuaterniondDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuaterniondDefaultTypeInternal() {}
  union {
    Quaterniond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuaterniondDefaultTypeInternal _Quaterniond_default_instance_;
constexpr Quaternionf::Quaternionf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : w_(0)
  , x_(0)
  , y_(0)
  , z_(0){}
struct QuaternionfDefaultTypeInternal {
  constexpr QuaternionfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuaternionfDefaultTypeInternal() {}
  union {
    Quaternionf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuaternionfDefaultTypeInternal _Quaternionf_default_instance_;
constexpr Transformation3d::Transformation3d(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rotation_(nullptr)
  , translation_(nullptr){}
struct Transformation3dDefaultTypeInternal {
  constexpr Transformation3dDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transformation3dDefaultTypeInternal() {}
  union {
    Transformation3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transformation3dDefaultTypeInternal _Transformation3d_default_instance_;
constexpr Transformation3f::Transformation3f(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rotation_(nullptr)
  , translation_(nullptr){}
struct Transformation3fDefaultTypeInternal {
  constexpr Transformation3fDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transformation3fDefaultTypeInternal() {}
  union {
    Transformation3f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transformation3fDefaultTypeInternal _Transformation3f_default_instance_;
}  // namespace math
}  // namespace prediction
}  // namespace proto
}  // namespace artemis
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_geometry_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_geometry_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_geometry_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_geometry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector3i, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector3i, x_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector3i, y_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector3i, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Polyline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Polyline, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Polygon, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Points, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Points, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector2d, x_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector2d, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector2f, x_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector2f, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector3d, x_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector3d, y_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector3d, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector3f, x_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector3f, y_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Vector3f, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix2d, e00_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix2d, e01_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix2d, e10_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix2d, e11_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix2f, e00_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix2f, e01_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix2f, e10_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix2f, e11_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3d, e00_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3d, e01_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3d, e02_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3d, e10_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3d, e11_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3d, e12_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3d, e20_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3d, e21_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3d, e22_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3f, e00_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3f, e01_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3f, e02_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3f, e10_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3f, e11_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3f, e12_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3f, e20_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3f, e21_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Matrix3f, e22_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Quaterniond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Quaterniond, w_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Quaterniond, x_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Quaterniond, y_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Quaterniond, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Quaternionf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Quaternionf, w_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Quaternionf, x_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Quaternionf, y_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Quaternionf, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Transformation3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Transformation3d, rotation_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Transformation3d, translation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Transformation3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Transformation3f, rotation_),
  PROTOBUF_FIELD_OFFSET(::artemis::proto::prediction::math::Transformation3f, translation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::artemis::proto::prediction::math::Vector3i)},
  { 8, -1, sizeof(::artemis::proto::prediction::math::Polyline)},
  { 14, -1, sizeof(::artemis::proto::prediction::math::Polygon)},
  { 20, -1, sizeof(::artemis::proto::prediction::math::Points)},
  { 26, -1, sizeof(::artemis::proto::prediction::math::Vector2d)},
  { 33, -1, sizeof(::artemis::proto::prediction::math::Vector2f)},
  { 40, -1, sizeof(::artemis::proto::prediction::math::Vector3d)},
  { 48, -1, sizeof(::artemis::proto::prediction::math::Vector3f)},
  { 56, -1, sizeof(::artemis::proto::prediction::math::Matrix2d)},
  { 65, -1, sizeof(::artemis::proto::prediction::math::Matrix2f)},
  { 74, -1, sizeof(::artemis::proto::prediction::math::Matrix3d)},
  { 88, -1, sizeof(::artemis::proto::prediction::math::Matrix3f)},
  { 102, -1, sizeof(::artemis::proto::prediction::math::Quaterniond)},
  { 111, -1, sizeof(::artemis::proto::prediction::math::Quaternionf)},
  { 120, -1, sizeof(::artemis::proto::prediction::math::Transformation3d)},
  { 127, -1, sizeof(::artemis::proto::prediction::math::Transformation3f)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::math::_Vector3i_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::math::_Polyline_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::math::_Polygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::math::_Points_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::math::_Vector2d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::math::_Vector2f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::math::_Vector3d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::math::_Vector3f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::math::_Matrix2d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::math::_Matrix2f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::math::_Matrix3d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::math::_Matrix3f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::math::_Quaterniond_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::math::_Quaternionf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::math::_Transformation3d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artemis::proto::prediction::math::_Transformation3f_default_instance_),
};

const char descriptor_table_protodef_geometry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016geometry.proto\022\035artemis.proto.predicti"
  "on.math\"+\n\010Vector3i\022\t\n\001x\030\001 \001(\003\022\t\n\001y\030\002 \001("
  "\003\022\t\n\001z\030\003 \001(\003\"C\n\010Polyline\0227\n\006points\030\001 \003(\013"
  "2\'.artemis.proto.prediction.math.Vector3"
  "d\"B\n\007Polygon\0227\n\006points\030\001 \003(\0132\'.artemis.p"
  "roto.prediction.math.Vector3d\"A\n\006Points\022"
  "7\n\006points\030\001 \003(\0132\'.artemis.proto.predicti"
  "on.math.Vector3d\" \n\010Vector2d\022\t\n\001x\030\001 \001(\001\022"
  "\t\n\001y\030\002 \001(\001\" \n\010Vector2f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002"
  " \001(\002\"+\n\010Vector3d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t"
  "\n\001z\030\003 \001(\001\"+\n\010Vector3f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 "
  "\001(\002\022\t\n\001z\030\003 \001(\002\">\n\010Matrix2d\022\013\n\003e00\030\001 \001(\001\022"
  "\013\n\003e01\030\002 \001(\001\022\013\n\003e10\030\003 \001(\001\022\013\n\003e11\030\004 \001(\001\">"
  "\n\010Matrix2f\022\013\n\003e00\030\001 \001(\002\022\013\n\003e01\030\002 \001(\002\022\013\n\003"
  "e10\030\003 \001(\002\022\013\n\003e11\030\004 \001(\002\"\177\n\010Matrix3d\022\013\n\003e0"
  "0\030\001 \001(\001\022\013\n\003e01\030\002 \001(\001\022\013\n\003e02\030\003 \001(\001\022\013\n\003e10"
  "\030\004 \001(\001\022\013\n\003e11\030\005 \001(\001\022\013\n\003e12\030\006 \001(\001\022\013\n\003e20\030"
  "\007 \001(\001\022\013\n\003e21\030\010 \001(\001\022\013\n\003e22\030\t \001(\001\"\177\n\010Matri"
  "x3f\022\013\n\003e00\030\001 \001(\002\022\013\n\003e01\030\002 \001(\002\022\013\n\003e02\030\003 \001"
  "(\002\022\013\n\003e10\030\004 \001(\002\022\013\n\003e11\030\005 \001(\002\022\013\n\003e12\030\006 \001("
  "\002\022\013\n\003e20\030\007 \001(\002\022\013\n\003e21\030\010 \001(\002\022\013\n\003e22\030\t \001(\002"
  "\"9\n\013Quaterniond\022\t\n\001w\030\001 \001(\001\022\t\n\001x\030\002 \001(\001\022\t\n"
  "\001y\030\003 \001(\001\022\t\n\001z\030\004 \001(\001\"9\n\013Quaternionf\022\t\n\001w\030"
  "\001 \001(\002\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"\216"
  "\001\n\020Transformation3d\022<\n\010rotation\030\001 \001(\0132*."
  "artemis.proto.prediction.math.Quaternion"
  "d\022<\n\013translation\030\002 \001(\0132\'.artemis.proto.p"
  "rediction.math.Vector3d\"\216\001\n\020Transformati"
  "on3f\022<\n\010rotation\030\001 \001(\0132*.artemis.proto.p"
  "rediction.math.Quaternionf\022<\n\013translatio"
  "n\030\002 \001(\0132\'.artemis.proto.prediction.math."
  "Vector3fb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_geometry_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_geometry_2eproto = {
  false, false, 1256, descriptor_table_protodef_geometry_2eproto, "geometry.proto", 
  &descriptor_table_geometry_2eproto_once, nullptr, 0, 16,
  schemas, file_default_instances, TableStruct_geometry_2eproto::offsets,
  file_level_metadata_geometry_2eproto, file_level_enum_descriptors_geometry_2eproto, file_level_service_descriptors_geometry_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_geometry_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_geometry_2eproto);
  return descriptor_table_geometry_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_geometry_2eproto(&descriptor_table_geometry_2eproto);
namespace artemis {
namespace proto {
namespace prediction {
namespace math {

// ===================================================================

class Vector3i::_Internal {
 public:
};

Vector3i::Vector3i(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.math.Vector3i)
}
Vector3i::Vector3i(const Vector3i& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.math.Vector3i)
}

void Vector3i::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3i::~Vector3i() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.math.Vector3i)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3i::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector3i::ArenaDtor(void* object) {
  Vector3i* _this = reinterpret_cast< Vector3i* >(object);
  (void)_this;
}
void Vector3i::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3i::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector3i::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.math.Vector3i)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3i::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3i::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.math.Vector3i)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_x(), target);
  }

  // int64 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_y(), target);
  }

  // int64 z = 3;
  if (this->z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.math.Vector3i)
  return target;
}

size_t Vector3i::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.math.Vector3i)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_x());
  }

  // int64 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_y());
  }

  // int64 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_z());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3i::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.math.Vector3i)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3i* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3i>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.math.Vector3i)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.math.Vector3i)
    MergeFrom(*source);
  }
}

void Vector3i::MergeFrom(const Vector3i& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.math.Vector3i)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.z() != 0) {
    _internal_set_z(from._internal_z());
  }
}

void Vector3i::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.math.Vector3i)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3i::CopyFrom(const Vector3i& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.math.Vector3i)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3i::IsInitialized() const {
  return true;
}

void Vector3i::InternalSwap(Vector3i* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3i, z_)
      + sizeof(Vector3i::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3i, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3i::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Polyline::_Internal {
 public:
};

Polyline::Polyline(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.math.Polyline)
}
Polyline::Polyline(const Polyline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.math.Polyline)
}

void Polyline::SharedCtor() {
}

Polyline::~Polyline() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.math.Polyline)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Polyline::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Polyline::ArenaDtor(void* object) {
  Polyline* _this = reinterpret_cast< Polyline* >(object);
  (void)_this;
}
void Polyline::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Polyline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Polyline::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.math.Polyline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polyline::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .artemis.proto.prediction.math.Vector3d points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polyline::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.math.Polyline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .artemis.proto.prediction.math.Vector3d points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.math.Polyline)
  return target;
}

size_t Polyline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.math.Polyline)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .artemis.proto.prediction.math.Vector3d points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polyline::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.math.Polyline)
  GOOGLE_DCHECK_NE(&from, this);
  const Polyline* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Polyline>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.math.Polyline)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.math.Polyline)
    MergeFrom(*source);
  }
}

void Polyline::MergeFrom(const Polyline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.math.Polyline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void Polyline::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.math.Polyline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polyline::CopyFrom(const Polyline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.math.Polyline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polyline::IsInitialized() const {
  return true;
}

void Polyline::InternalSwap(Polyline* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Polyline::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Polygon::_Internal {
 public:
};

Polygon::Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.math.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.math.Polygon)
}

void Polygon::SharedCtor() {
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.math.Polygon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Polygon::ArenaDtor(void* object) {
  Polygon* _this = reinterpret_cast< Polygon* >(object);
  (void)_this;
}
void Polygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.math.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .artemis.proto.prediction.math.Vector3d points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.math.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .artemis.proto.prediction.math.Vector3d points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.math.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.math.Polygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .artemis.proto.prediction.math.Vector3d points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.math.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Polygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.math.Polygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.math.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.math.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void Polygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.math.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.math.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Points::_Internal {
 public:
};

Points::Points(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.math.Points)
}
Points::Points(const Points& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.math.Points)
}

void Points::SharedCtor() {
}

Points::~Points() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.math.Points)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Points::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Points::ArenaDtor(void* object) {
  Points* _this = reinterpret_cast< Points* >(object);
  (void)_this;
}
void Points::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Points::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Points::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.math.Points)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Points::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .artemis.proto.prediction.math.Vector3d points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Points::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.math.Points)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .artemis.proto.prediction.math.Vector3d points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.math.Points)
  return target;
}

size_t Points::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.math.Points)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .artemis.proto.prediction.math.Vector3d points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Points::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.math.Points)
  GOOGLE_DCHECK_NE(&from, this);
  const Points* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Points>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.math.Points)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.math.Points)
    MergeFrom(*source);
  }
}

void Points::MergeFrom(const Points& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.math.Points)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void Points::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.math.Points)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Points::CopyFrom(const Points& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.math.Points)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Points::IsInitialized() const {
  return true;
}

void Points::InternalSwap(Points* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Points::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Vector2d::_Internal {
 public:
};

Vector2d::Vector2d(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.math.Vector2d)
}
Vector2d::Vector2d(const Vector2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.math.Vector2d)
}

void Vector2d::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vector2d::~Vector2d() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.math.Vector2d)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector2d::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector2d::ArenaDtor(void* object) {
  Vector2d* _this = reinterpret_cast< Vector2d* >(object);
  (void)_this;
}
void Vector2d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector2d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector2d::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.math.Vector2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector2d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.math.Vector2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.math.Vector2d)
  return target;
}

size_t Vector2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.math.Vector2d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector2d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.math.Vector2d)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector2d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector2d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.math.Vector2d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.math.Vector2d)
    MergeFrom(*source);
  }
}

void Vector2d::MergeFrom(const Vector2d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.math.Vector2d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Vector2d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.math.Vector2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2d::CopyFrom(const Vector2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.math.Vector2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2d::IsInitialized() const {
  return true;
}

void Vector2d::InternalSwap(Vector2d* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2d, y_)
      + sizeof(Vector2d::y_)
      - PROTOBUF_FIELD_OFFSET(Vector2d, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Vector2f::_Internal {
 public:
};

Vector2f::Vector2f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.math.Vector2f)
}
Vector2f::Vector2f(const Vector2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.math.Vector2f)
}

void Vector2f::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vector2f::~Vector2f() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.math.Vector2f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector2f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector2f::ArenaDtor(void* object) {
  Vector2f* _this = reinterpret_cast< Vector2f* >(object);
  (void)_this;
}
void Vector2f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector2f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector2f::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.math.Vector2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector2f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.math.Vector2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.math.Vector2f)
  return target;
}

size_t Vector2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.math.Vector2f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector2f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.math.Vector2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector2f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector2f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.math.Vector2f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.math.Vector2f)
    MergeFrom(*source);
  }
}

void Vector2f::MergeFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.math.Vector2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Vector2f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.math.Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2f::CopyFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.math.Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2f::IsInitialized() const {
  return true;
}

void Vector2f::InternalSwap(Vector2f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2f, y_)
      + sizeof(Vector2f::y_)
      - PROTOBUF_FIELD_OFFSET(Vector2f, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Vector3d::_Internal {
 public:
};

Vector3d::Vector3d(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.math.Vector3d)
}
Vector3d::Vector3d(const Vector3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.math.Vector3d)
}

void Vector3d::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3d::~Vector3d() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.math.Vector3d)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3d::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector3d::ArenaDtor(void* object) {
  Vector3d* _this = reinterpret_cast< Vector3d* >(object);
  (void)_this;
}
void Vector3d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector3d::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.math.Vector3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.math.Vector3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.math.Vector3d)
  return target;
}

size_t Vector3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.math.Vector3d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.math.Vector3d)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.math.Vector3d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.math.Vector3d)
    MergeFrom(*source);
  }
}

void Vector3d::MergeFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.math.Vector3d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vector3d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.math.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3d::CopyFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.math.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3d::IsInitialized() const {
  return true;
}

void Vector3d::InternalSwap(Vector3d* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3d, z_)
      + sizeof(Vector3d::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3d, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Vector3f::_Internal {
 public:
};

Vector3f::Vector3f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.math.Vector3f)
}
Vector3f::Vector3f(const Vector3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.math.Vector3f)
}

void Vector3f::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3f::~Vector3f() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.math.Vector3f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector3f::ArenaDtor(void* object) {
  Vector3f* _this = reinterpret_cast< Vector3f* >(object);
  (void)_this;
}
void Vector3f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector3f::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.math.Vector3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.math.Vector3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.math.Vector3f)
  return target;
}

size_t Vector3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.math.Vector3f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.math.Vector3f)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.math.Vector3f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.math.Vector3f)
    MergeFrom(*source);
  }
}

void Vector3f::MergeFrom(const Vector3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.math.Vector3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vector3f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.math.Vector3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3f::CopyFrom(const Vector3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.math.Vector3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3f::IsInitialized() const {
  return true;
}

void Vector3f::InternalSwap(Vector3f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3f, z_)
      + sizeof(Vector3f::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3f, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Matrix2d::_Internal {
 public:
};

Matrix2d::Matrix2d(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.math.Matrix2d)
}
Matrix2d::Matrix2d(const Matrix2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&e00_, &from.e00_,
    static_cast<size_t>(reinterpret_cast<char*>(&e11_) -
    reinterpret_cast<char*>(&e00_)) + sizeof(e11_));
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.math.Matrix2d)
}

void Matrix2d::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&e00_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&e11_) -
    reinterpret_cast<char*>(&e00_)) + sizeof(e11_));
}

Matrix2d::~Matrix2d() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.math.Matrix2d)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Matrix2d::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Matrix2d::ArenaDtor(void* object) {
  Matrix2d* _this = reinterpret_cast< Matrix2d* >(object);
  (void)_this;
}
void Matrix2d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Matrix2d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Matrix2d::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.math.Matrix2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&e00_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&e11_) -
      reinterpret_cast<char*>(&e00_)) + sizeof(e11_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix2d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double e00 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          e00_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double e01 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          e01_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double e10 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          e10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double e11 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          e11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Matrix2d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.math.Matrix2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double e00 = 1;
  if (!(this->e00() <= 0 && this->e00() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_e00(), target);
  }

  // double e01 = 2;
  if (!(this->e01() <= 0 && this->e01() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_e01(), target);
  }

  // double e10 = 3;
  if (!(this->e10() <= 0 && this->e10() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_e10(), target);
  }

  // double e11 = 4;
  if (!(this->e11() <= 0 && this->e11() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_e11(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.math.Matrix2d)
  return target;
}

size_t Matrix2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.math.Matrix2d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double e00 = 1;
  if (!(this->e00() <= 0 && this->e00() >= 0)) {
    total_size += 1 + 8;
  }

  // double e01 = 2;
  if (!(this->e01() <= 0 && this->e01() >= 0)) {
    total_size += 1 + 8;
  }

  // double e10 = 3;
  if (!(this->e10() <= 0 && this->e10() >= 0)) {
    total_size += 1 + 8;
  }

  // double e11 = 4;
  if (!(this->e11() <= 0 && this->e11() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matrix2d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.math.Matrix2d)
  GOOGLE_DCHECK_NE(&from, this);
  const Matrix2d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Matrix2d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.math.Matrix2d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.math.Matrix2d)
    MergeFrom(*source);
  }
}

void Matrix2d::MergeFrom(const Matrix2d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.math.Matrix2d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.e00() <= 0 && from.e00() >= 0)) {
    _internal_set_e00(from._internal_e00());
  }
  if (!(from.e01() <= 0 && from.e01() >= 0)) {
    _internal_set_e01(from._internal_e01());
  }
  if (!(from.e10() <= 0 && from.e10() >= 0)) {
    _internal_set_e10(from._internal_e10());
  }
  if (!(from.e11() <= 0 && from.e11() >= 0)) {
    _internal_set_e11(from._internal_e11());
  }
}

void Matrix2d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.math.Matrix2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix2d::CopyFrom(const Matrix2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.math.Matrix2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix2d::IsInitialized() const {
  return true;
}

void Matrix2d::InternalSwap(Matrix2d* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix2d, e11_)
      + sizeof(Matrix2d::e11_)
      - PROTOBUF_FIELD_OFFSET(Matrix2d, e00_)>(
          reinterpret_cast<char*>(&e00_),
          reinterpret_cast<char*>(&other->e00_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix2d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Matrix2f::_Internal {
 public:
};

Matrix2f::Matrix2f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.math.Matrix2f)
}
Matrix2f::Matrix2f(const Matrix2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&e00_, &from.e00_,
    static_cast<size_t>(reinterpret_cast<char*>(&e11_) -
    reinterpret_cast<char*>(&e00_)) + sizeof(e11_));
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.math.Matrix2f)
}

void Matrix2f::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&e00_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&e11_) -
    reinterpret_cast<char*>(&e00_)) + sizeof(e11_));
}

Matrix2f::~Matrix2f() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.math.Matrix2f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Matrix2f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Matrix2f::ArenaDtor(void* object) {
  Matrix2f* _this = reinterpret_cast< Matrix2f* >(object);
  (void)_this;
}
void Matrix2f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Matrix2f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Matrix2f::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.math.Matrix2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&e00_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&e11_) -
      reinterpret_cast<char*>(&e00_)) + sizeof(e11_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix2f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float e00 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          e00_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float e01 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          e01_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float e10 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          e10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float e11 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          e11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Matrix2f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.math.Matrix2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float e00 = 1;
  if (!(this->e00() <= 0 && this->e00() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_e00(), target);
  }

  // float e01 = 2;
  if (!(this->e01() <= 0 && this->e01() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_e01(), target);
  }

  // float e10 = 3;
  if (!(this->e10() <= 0 && this->e10() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_e10(), target);
  }

  // float e11 = 4;
  if (!(this->e11() <= 0 && this->e11() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_e11(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.math.Matrix2f)
  return target;
}

size_t Matrix2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.math.Matrix2f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float e00 = 1;
  if (!(this->e00() <= 0 && this->e00() >= 0)) {
    total_size += 1 + 4;
  }

  // float e01 = 2;
  if (!(this->e01() <= 0 && this->e01() >= 0)) {
    total_size += 1 + 4;
  }

  // float e10 = 3;
  if (!(this->e10() <= 0 && this->e10() >= 0)) {
    total_size += 1 + 4;
  }

  // float e11 = 4;
  if (!(this->e11() <= 0 && this->e11() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matrix2f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.math.Matrix2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Matrix2f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Matrix2f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.math.Matrix2f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.math.Matrix2f)
    MergeFrom(*source);
  }
}

void Matrix2f::MergeFrom(const Matrix2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.math.Matrix2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.e00() <= 0 && from.e00() >= 0)) {
    _internal_set_e00(from._internal_e00());
  }
  if (!(from.e01() <= 0 && from.e01() >= 0)) {
    _internal_set_e01(from._internal_e01());
  }
  if (!(from.e10() <= 0 && from.e10() >= 0)) {
    _internal_set_e10(from._internal_e10());
  }
  if (!(from.e11() <= 0 && from.e11() >= 0)) {
    _internal_set_e11(from._internal_e11());
  }
}

void Matrix2f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.math.Matrix2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix2f::CopyFrom(const Matrix2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.math.Matrix2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix2f::IsInitialized() const {
  return true;
}

void Matrix2f::InternalSwap(Matrix2f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix2f, e11_)
      + sizeof(Matrix2f::e11_)
      - PROTOBUF_FIELD_OFFSET(Matrix2f, e00_)>(
          reinterpret_cast<char*>(&e00_),
          reinterpret_cast<char*>(&other->e00_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix2f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Matrix3d::_Internal {
 public:
};

Matrix3d::Matrix3d(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.math.Matrix3d)
}
Matrix3d::Matrix3d(const Matrix3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&e00_, &from.e00_,
    static_cast<size_t>(reinterpret_cast<char*>(&e22_) -
    reinterpret_cast<char*>(&e00_)) + sizeof(e22_));
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.math.Matrix3d)
}

void Matrix3d::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&e00_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&e22_) -
    reinterpret_cast<char*>(&e00_)) + sizeof(e22_));
}

Matrix3d::~Matrix3d() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.math.Matrix3d)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Matrix3d::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Matrix3d::ArenaDtor(void* object) {
  Matrix3d* _this = reinterpret_cast< Matrix3d* >(object);
  (void)_this;
}
void Matrix3d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Matrix3d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Matrix3d::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.math.Matrix3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&e00_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&e22_) -
      reinterpret_cast<char*>(&e00_)) + sizeof(e22_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix3d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double e00 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          e00_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double e01 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          e01_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double e02 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          e02_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double e10 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          e10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double e11 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          e11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double e12 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          e12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double e20 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          e20_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double e21 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          e21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double e22 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          e22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Matrix3d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.math.Matrix3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double e00 = 1;
  if (!(this->e00() <= 0 && this->e00() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_e00(), target);
  }

  // double e01 = 2;
  if (!(this->e01() <= 0 && this->e01() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_e01(), target);
  }

  // double e02 = 3;
  if (!(this->e02() <= 0 && this->e02() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_e02(), target);
  }

  // double e10 = 4;
  if (!(this->e10() <= 0 && this->e10() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_e10(), target);
  }

  // double e11 = 5;
  if (!(this->e11() <= 0 && this->e11() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_e11(), target);
  }

  // double e12 = 6;
  if (!(this->e12() <= 0 && this->e12() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_e12(), target);
  }

  // double e20 = 7;
  if (!(this->e20() <= 0 && this->e20() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_e20(), target);
  }

  // double e21 = 8;
  if (!(this->e21() <= 0 && this->e21() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_e21(), target);
  }

  // double e22 = 9;
  if (!(this->e22() <= 0 && this->e22() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_e22(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.math.Matrix3d)
  return target;
}

size_t Matrix3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.math.Matrix3d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double e00 = 1;
  if (!(this->e00() <= 0 && this->e00() >= 0)) {
    total_size += 1 + 8;
  }

  // double e01 = 2;
  if (!(this->e01() <= 0 && this->e01() >= 0)) {
    total_size += 1 + 8;
  }

  // double e02 = 3;
  if (!(this->e02() <= 0 && this->e02() >= 0)) {
    total_size += 1 + 8;
  }

  // double e10 = 4;
  if (!(this->e10() <= 0 && this->e10() >= 0)) {
    total_size += 1 + 8;
  }

  // double e11 = 5;
  if (!(this->e11() <= 0 && this->e11() >= 0)) {
    total_size += 1 + 8;
  }

  // double e12 = 6;
  if (!(this->e12() <= 0 && this->e12() >= 0)) {
    total_size += 1 + 8;
  }

  // double e20 = 7;
  if (!(this->e20() <= 0 && this->e20() >= 0)) {
    total_size += 1 + 8;
  }

  // double e21 = 8;
  if (!(this->e21() <= 0 && this->e21() >= 0)) {
    total_size += 1 + 8;
  }

  // double e22 = 9;
  if (!(this->e22() <= 0 && this->e22() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matrix3d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.math.Matrix3d)
  GOOGLE_DCHECK_NE(&from, this);
  const Matrix3d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Matrix3d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.math.Matrix3d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.math.Matrix3d)
    MergeFrom(*source);
  }
}

void Matrix3d::MergeFrom(const Matrix3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.math.Matrix3d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.e00() <= 0 && from.e00() >= 0)) {
    _internal_set_e00(from._internal_e00());
  }
  if (!(from.e01() <= 0 && from.e01() >= 0)) {
    _internal_set_e01(from._internal_e01());
  }
  if (!(from.e02() <= 0 && from.e02() >= 0)) {
    _internal_set_e02(from._internal_e02());
  }
  if (!(from.e10() <= 0 && from.e10() >= 0)) {
    _internal_set_e10(from._internal_e10());
  }
  if (!(from.e11() <= 0 && from.e11() >= 0)) {
    _internal_set_e11(from._internal_e11());
  }
  if (!(from.e12() <= 0 && from.e12() >= 0)) {
    _internal_set_e12(from._internal_e12());
  }
  if (!(from.e20() <= 0 && from.e20() >= 0)) {
    _internal_set_e20(from._internal_e20());
  }
  if (!(from.e21() <= 0 && from.e21() >= 0)) {
    _internal_set_e21(from._internal_e21());
  }
  if (!(from.e22() <= 0 && from.e22() >= 0)) {
    _internal_set_e22(from._internal_e22());
  }
}

void Matrix3d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.math.Matrix3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix3d::CopyFrom(const Matrix3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.math.Matrix3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix3d::IsInitialized() const {
  return true;
}

void Matrix3d::InternalSwap(Matrix3d* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix3d, e22_)
      + sizeof(Matrix3d::e22_)
      - PROTOBUF_FIELD_OFFSET(Matrix3d, e00_)>(
          reinterpret_cast<char*>(&e00_),
          reinterpret_cast<char*>(&other->e00_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix3d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Matrix3f::_Internal {
 public:
};

Matrix3f::Matrix3f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.math.Matrix3f)
}
Matrix3f::Matrix3f(const Matrix3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&e00_, &from.e00_,
    static_cast<size_t>(reinterpret_cast<char*>(&e22_) -
    reinterpret_cast<char*>(&e00_)) + sizeof(e22_));
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.math.Matrix3f)
}

void Matrix3f::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&e00_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&e22_) -
    reinterpret_cast<char*>(&e00_)) + sizeof(e22_));
}

Matrix3f::~Matrix3f() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.math.Matrix3f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Matrix3f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Matrix3f::ArenaDtor(void* object) {
  Matrix3f* _this = reinterpret_cast< Matrix3f* >(object);
  (void)_this;
}
void Matrix3f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Matrix3f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Matrix3f::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.math.Matrix3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&e00_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&e22_) -
      reinterpret_cast<char*>(&e00_)) + sizeof(e22_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix3f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float e00 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          e00_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float e01 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          e01_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float e02 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          e02_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float e10 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          e10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float e11 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          e11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float e12 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          e12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float e20 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          e20_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float e21 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          e21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float e22 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          e22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Matrix3f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.math.Matrix3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float e00 = 1;
  if (!(this->e00() <= 0 && this->e00() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_e00(), target);
  }

  // float e01 = 2;
  if (!(this->e01() <= 0 && this->e01() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_e01(), target);
  }

  // float e02 = 3;
  if (!(this->e02() <= 0 && this->e02() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_e02(), target);
  }

  // float e10 = 4;
  if (!(this->e10() <= 0 && this->e10() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_e10(), target);
  }

  // float e11 = 5;
  if (!(this->e11() <= 0 && this->e11() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_e11(), target);
  }

  // float e12 = 6;
  if (!(this->e12() <= 0 && this->e12() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_e12(), target);
  }

  // float e20 = 7;
  if (!(this->e20() <= 0 && this->e20() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_e20(), target);
  }

  // float e21 = 8;
  if (!(this->e21() <= 0 && this->e21() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_e21(), target);
  }

  // float e22 = 9;
  if (!(this->e22() <= 0 && this->e22() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_e22(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.math.Matrix3f)
  return target;
}

size_t Matrix3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.math.Matrix3f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float e00 = 1;
  if (!(this->e00() <= 0 && this->e00() >= 0)) {
    total_size += 1 + 4;
  }

  // float e01 = 2;
  if (!(this->e01() <= 0 && this->e01() >= 0)) {
    total_size += 1 + 4;
  }

  // float e02 = 3;
  if (!(this->e02() <= 0 && this->e02() >= 0)) {
    total_size += 1 + 4;
  }

  // float e10 = 4;
  if (!(this->e10() <= 0 && this->e10() >= 0)) {
    total_size += 1 + 4;
  }

  // float e11 = 5;
  if (!(this->e11() <= 0 && this->e11() >= 0)) {
    total_size += 1 + 4;
  }

  // float e12 = 6;
  if (!(this->e12() <= 0 && this->e12() >= 0)) {
    total_size += 1 + 4;
  }

  // float e20 = 7;
  if (!(this->e20() <= 0 && this->e20() >= 0)) {
    total_size += 1 + 4;
  }

  // float e21 = 8;
  if (!(this->e21() <= 0 && this->e21() >= 0)) {
    total_size += 1 + 4;
  }

  // float e22 = 9;
  if (!(this->e22() <= 0 && this->e22() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matrix3f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.math.Matrix3f)
  GOOGLE_DCHECK_NE(&from, this);
  const Matrix3f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Matrix3f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.math.Matrix3f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.math.Matrix3f)
    MergeFrom(*source);
  }
}

void Matrix3f::MergeFrom(const Matrix3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.math.Matrix3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.e00() <= 0 && from.e00() >= 0)) {
    _internal_set_e00(from._internal_e00());
  }
  if (!(from.e01() <= 0 && from.e01() >= 0)) {
    _internal_set_e01(from._internal_e01());
  }
  if (!(from.e02() <= 0 && from.e02() >= 0)) {
    _internal_set_e02(from._internal_e02());
  }
  if (!(from.e10() <= 0 && from.e10() >= 0)) {
    _internal_set_e10(from._internal_e10());
  }
  if (!(from.e11() <= 0 && from.e11() >= 0)) {
    _internal_set_e11(from._internal_e11());
  }
  if (!(from.e12() <= 0 && from.e12() >= 0)) {
    _internal_set_e12(from._internal_e12());
  }
  if (!(from.e20() <= 0 && from.e20() >= 0)) {
    _internal_set_e20(from._internal_e20());
  }
  if (!(from.e21() <= 0 && from.e21() >= 0)) {
    _internal_set_e21(from._internal_e21());
  }
  if (!(from.e22() <= 0 && from.e22() >= 0)) {
    _internal_set_e22(from._internal_e22());
  }
}

void Matrix3f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.math.Matrix3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix3f::CopyFrom(const Matrix3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.math.Matrix3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix3f::IsInitialized() const {
  return true;
}

void Matrix3f::InternalSwap(Matrix3f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix3f, e22_)
      + sizeof(Matrix3f::e22_)
      - PROTOBUF_FIELD_OFFSET(Matrix3f, e00_)>(
          reinterpret_cast<char*>(&e00_),
          reinterpret_cast<char*>(&other->e00_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix3f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Quaterniond::_Internal {
 public:
};

Quaterniond::Quaterniond(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.math.Quaterniond)
}
Quaterniond::Quaterniond(const Quaterniond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.math.Quaterniond)
}

void Quaterniond::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&w_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
}

Quaterniond::~Quaterniond() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.math.Quaterniond)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Quaterniond::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Quaterniond::ArenaDtor(void* object) {
  Quaterniond* _this = reinterpret_cast< Quaterniond* >(object);
  (void)_this;
}
void Quaterniond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quaterniond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Quaterniond::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.math.Quaterniond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaterniond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quaterniond::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.math.Quaterniond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_w(), target);
  }

  // double x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // double y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // double z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.math.Quaterniond)
  return target;
}

size_t Quaterniond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.math.Quaterniond)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 8;
  }

  // double x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaterniond::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.math.Quaterniond)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaterniond* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quaterniond>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.math.Quaterniond)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.math.Quaterniond)
    MergeFrom(*source);
  }
}

void Quaterniond::MergeFrom(const Quaterniond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.math.Quaterniond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Quaterniond::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.math.Quaterniond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaterniond::CopyFrom(const Quaterniond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.math.Quaterniond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaterniond::IsInitialized() const {
  return true;
}

void Quaterniond::InternalSwap(Quaterniond* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaterniond, z_)
      + sizeof(Quaterniond::z_)
      - PROTOBUF_FIELD_OFFSET(Quaterniond, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaterniond::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Quaternionf::_Internal {
 public:
};

Quaternionf::Quaternionf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.math.Quaternionf)
}
Quaternionf::Quaternionf(const Quaternionf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.math.Quaternionf)
}

void Quaternionf::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&w_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
}

Quaternionf::~Quaternionf() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.math.Quaternionf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Quaternionf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Quaternionf::ArenaDtor(void* object) {
  Quaternionf* _this = reinterpret_cast< Quaternionf* >(object);
  (void)_this;
}
void Quaternionf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quaternionf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Quaternionf::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.math.Quaternionf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternionf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quaternionf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.math.Quaternionf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.math.Quaternionf)
  return target;
}

size_t Quaternionf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.math.Quaternionf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 4;
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaternionf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.math.Quaternionf)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternionf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quaternionf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.math.Quaternionf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.math.Quaternionf)
    MergeFrom(*source);
  }
}

void Quaternionf::MergeFrom(const Quaternionf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.math.Quaternionf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Quaternionf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.math.Quaternionf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternionf::CopyFrom(const Quaternionf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.math.Quaternionf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternionf::IsInitialized() const {
  return true;
}

void Quaternionf::InternalSwap(Quaternionf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternionf, z_)
      + sizeof(Quaternionf::z_)
      - PROTOBUF_FIELD_OFFSET(Quaternionf, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternionf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transformation3d::_Internal {
 public:
  static const ::artemis::proto::prediction::math::Quaterniond& rotation(const Transformation3d* msg);
  static const ::artemis::proto::prediction::math::Vector3d& translation(const Transformation3d* msg);
};

const ::artemis::proto::prediction::math::Quaterniond&
Transformation3d::_Internal::rotation(const Transformation3d* msg) {
  return *msg->rotation_;
}
const ::artemis::proto::prediction::math::Vector3d&
Transformation3d::_Internal::translation(const Transformation3d* msg) {
  return *msg->translation_;
}
Transformation3d::Transformation3d(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.math.Transformation3d)
}
Transformation3d::Transformation3d(const Transformation3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rotation()) {
    rotation_ = new ::artemis::proto::prediction::math::Quaterniond(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from._internal_has_translation()) {
    translation_ = new ::artemis::proto::prediction::math::Vector3d(*from.translation_);
  } else {
    translation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.math.Transformation3d)
}

void Transformation3d::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rotation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&translation_) -
    reinterpret_cast<char*>(&rotation_)) + sizeof(translation_));
}

Transformation3d::~Transformation3d() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.math.Transformation3d)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transformation3d::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete translation_;
}

void Transformation3d::ArenaDtor(void* object) {
  Transformation3d* _this = reinterpret_cast< Transformation3d* >(object);
  (void)_this;
}
void Transformation3d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transformation3d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transformation3d::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.math.Transformation3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  if (GetArena() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transformation3d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .artemis.proto.prediction.math.Quaterniond rotation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .artemis.proto.prediction.math.Vector3d translation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transformation3d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.math.Transformation3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .artemis.proto.prediction.math.Quaterniond rotation = 1;
  if (this->has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rotation(this), target, stream);
  }

  // .artemis.proto.prediction.math.Vector3d translation = 2;
  if (this->has_translation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::translation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.math.Transformation3d)
  return target;
}

size_t Transformation3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.math.Transformation3d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .artemis.proto.prediction.math.Quaterniond rotation = 1;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // .artemis.proto.prediction.math.Vector3d translation = 2;
  if (this->has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *translation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transformation3d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.math.Transformation3d)
  GOOGLE_DCHECK_NE(&from, this);
  const Transformation3d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transformation3d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.math.Transformation3d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.math.Transformation3d)
    MergeFrom(*source);
  }
}

void Transformation3d::MergeFrom(const Transformation3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.math.Transformation3d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rotation()) {
    _internal_mutable_rotation()->::artemis::proto::prediction::math::Quaterniond::MergeFrom(from._internal_rotation());
  }
  if (from.has_translation()) {
    _internal_mutable_translation()->::artemis::proto::prediction::math::Vector3d::MergeFrom(from._internal_translation());
  }
}

void Transformation3d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.math.Transformation3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transformation3d::CopyFrom(const Transformation3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.math.Transformation3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transformation3d::IsInitialized() const {
  return true;
}

void Transformation3d::InternalSwap(Transformation3d* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transformation3d, translation_)
      + sizeof(Transformation3d::translation_)
      - PROTOBUF_FIELD_OFFSET(Transformation3d, rotation_)>(
          reinterpret_cast<char*>(&rotation_),
          reinterpret_cast<char*>(&other->rotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transformation3d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transformation3f::_Internal {
 public:
  static const ::artemis::proto::prediction::math::Quaternionf& rotation(const Transformation3f* msg);
  static const ::artemis::proto::prediction::math::Vector3f& translation(const Transformation3f* msg);
};

const ::artemis::proto::prediction::math::Quaternionf&
Transformation3f::_Internal::rotation(const Transformation3f* msg) {
  return *msg->rotation_;
}
const ::artemis::proto::prediction::math::Vector3f&
Transformation3f::_Internal::translation(const Transformation3f* msg) {
  return *msg->translation_;
}
Transformation3f::Transformation3f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:artemis.proto.prediction.math.Transformation3f)
}
Transformation3f::Transformation3f(const Transformation3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rotation()) {
    rotation_ = new ::artemis::proto::prediction::math::Quaternionf(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from._internal_has_translation()) {
    translation_ = new ::artemis::proto::prediction::math::Vector3f(*from.translation_);
  } else {
    translation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:artemis.proto.prediction.math.Transformation3f)
}

void Transformation3f::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rotation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&translation_) -
    reinterpret_cast<char*>(&rotation_)) + sizeof(translation_));
}

Transformation3f::~Transformation3f() {
  // @@protoc_insertion_point(destructor:artemis.proto.prediction.math.Transformation3f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transformation3f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete translation_;
}

void Transformation3f::ArenaDtor(void* object) {
  Transformation3f* _this = reinterpret_cast< Transformation3f* >(object);
  (void)_this;
}
void Transformation3f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transformation3f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transformation3f::Clear() {
// @@protoc_insertion_point(message_clear_start:artemis.proto.prediction.math.Transformation3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  if (GetArena() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transformation3f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .artemis.proto.prediction.math.Quaternionf rotation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .artemis.proto.prediction.math.Vector3f translation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transformation3f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artemis.proto.prediction.math.Transformation3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .artemis.proto.prediction.math.Quaternionf rotation = 1;
  if (this->has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rotation(this), target, stream);
  }

  // .artemis.proto.prediction.math.Vector3f translation = 2;
  if (this->has_translation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::translation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artemis.proto.prediction.math.Transformation3f)
  return target;
}

size_t Transformation3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artemis.proto.prediction.math.Transformation3f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .artemis.proto.prediction.math.Quaternionf rotation = 1;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // .artemis.proto.prediction.math.Vector3f translation = 2;
  if (this->has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *translation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transformation3f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artemis.proto.prediction.math.Transformation3f)
  GOOGLE_DCHECK_NE(&from, this);
  const Transformation3f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transformation3f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artemis.proto.prediction.math.Transformation3f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artemis.proto.prediction.math.Transformation3f)
    MergeFrom(*source);
  }
}

void Transformation3f::MergeFrom(const Transformation3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artemis.proto.prediction.math.Transformation3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rotation()) {
    _internal_mutable_rotation()->::artemis::proto::prediction::math::Quaternionf::MergeFrom(from._internal_rotation());
  }
  if (from.has_translation()) {
    _internal_mutable_translation()->::artemis::proto::prediction::math::Vector3f::MergeFrom(from._internal_translation());
  }
}

void Transformation3f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artemis.proto.prediction.math.Transformation3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transformation3f::CopyFrom(const Transformation3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artemis.proto.prediction.math.Transformation3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transformation3f::IsInitialized() const {
  return true;
}

void Transformation3f::InternalSwap(Transformation3f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transformation3f, translation_)
      + sizeof(Transformation3f::translation_)
      - PROTOBUF_FIELD_OFFSET(Transformation3f, rotation_)>(
          reinterpret_cast<char*>(&rotation_),
          reinterpret_cast<char*>(&other->rotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transformation3f::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace math
}  // namespace prediction
}  // namespace proto
}  // namespace artemis
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::math::Vector3i* Arena::CreateMaybeMessage< ::artemis::proto::prediction::math::Vector3i >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::math::Vector3i >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::math::Polyline* Arena::CreateMaybeMessage< ::artemis::proto::prediction::math::Polyline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::math::Polyline >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::math::Polygon* Arena::CreateMaybeMessage< ::artemis::proto::prediction::math::Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::math::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::math::Points* Arena::CreateMaybeMessage< ::artemis::proto::prediction::math::Points >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::math::Points >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::math::Vector2d* Arena::CreateMaybeMessage< ::artemis::proto::prediction::math::Vector2d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::math::Vector2d >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::math::Vector2f* Arena::CreateMaybeMessage< ::artemis::proto::prediction::math::Vector2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::math::Vector2f >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::math::Vector3d* Arena::CreateMaybeMessage< ::artemis::proto::prediction::math::Vector3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::math::Vector3d >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::math::Vector3f* Arena::CreateMaybeMessage< ::artemis::proto::prediction::math::Vector3f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::math::Vector3f >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::math::Matrix2d* Arena::CreateMaybeMessage< ::artemis::proto::prediction::math::Matrix2d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::math::Matrix2d >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::math::Matrix2f* Arena::CreateMaybeMessage< ::artemis::proto::prediction::math::Matrix2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::math::Matrix2f >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::math::Matrix3d* Arena::CreateMaybeMessage< ::artemis::proto::prediction::math::Matrix3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::math::Matrix3d >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::math::Matrix3f* Arena::CreateMaybeMessage< ::artemis::proto::prediction::math::Matrix3f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::math::Matrix3f >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::math::Quaterniond* Arena::CreateMaybeMessage< ::artemis::proto::prediction::math::Quaterniond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::math::Quaterniond >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::math::Quaternionf* Arena::CreateMaybeMessage< ::artemis::proto::prediction::math::Quaternionf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::math::Quaternionf >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::math::Transformation3d* Arena::CreateMaybeMessage< ::artemis::proto::prediction::math::Transformation3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::math::Transformation3d >(arena);
}
template<> PROTOBUF_NOINLINE ::artemis::proto::prediction::math::Transformation3f* Arena::CreateMaybeMessage< ::artemis::proto::prediction::math::Transformation3f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artemis::proto::prediction::math::Transformation3f >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
