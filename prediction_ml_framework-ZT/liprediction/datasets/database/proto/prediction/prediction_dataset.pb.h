// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction_dataset.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_prediction_5fdataset_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_prediction_5fdataset_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_prediction_5fdataset_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_prediction_5fdataset_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prediction_5fdataset_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_prediction_5fdataset_2eproto_metadata_getter(int index);
namespace artemis {
namespace proto {
namespace prediction {
namespace dataset {
class ActorState;
struct ActorStateDefaultTypeInternal;
extern ActorStateDefaultTypeInternal _ActorState_default_instance_;
class LaneComponent;
struct LaneComponentDefaultTypeInternal;
extern LaneComponentDefaultTypeInternal _LaneComponent_default_instance_;
class LaneGraph;
struct LaneGraphDefaultTypeInternal;
extern LaneGraphDefaultTypeInternal _LaneGraph_default_instance_;
class LaneNode;
struct LaneNodeDefaultTypeInternal;
extern LaneNodeDefaultTypeInternal _LaneNode_default_instance_;
class LaneNodeAttribute;
struct LaneNodeAttributeDefaultTypeInternal;
extern LaneNodeAttributeDefaultTypeInternal _LaneNodeAttribute_default_instance_;
class LaneNodeGlobalId;
struct LaneNodeGlobalIdDefaultTypeInternal;
extern LaneNodeGlobalIdDefaultTypeInternal _LaneNodeGlobalId_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Sample;
struct SampleDefaultTypeInternal;
extern SampleDefaultTypeInternal _Sample_default_instance_;
class Sequence;
struct SequenceDefaultTypeInternal;
extern SequenceDefaultTypeInternal _Sequence_default_instance_;
class Trajectory;
struct TrajectoryDefaultTypeInternal;
extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
}  // namespace dataset
}  // namespace prediction
}  // namespace proto
}  // namespace artemis
PROTOBUF_NAMESPACE_OPEN
template<> ::artemis::proto::prediction::dataset::ActorState* Arena::CreateMaybeMessage<::artemis::proto::prediction::dataset::ActorState>(Arena*);
template<> ::artemis::proto::prediction::dataset::LaneComponent* Arena::CreateMaybeMessage<::artemis::proto::prediction::dataset::LaneComponent>(Arena*);
template<> ::artemis::proto::prediction::dataset::LaneGraph* Arena::CreateMaybeMessage<::artemis::proto::prediction::dataset::LaneGraph>(Arena*);
template<> ::artemis::proto::prediction::dataset::LaneNode* Arena::CreateMaybeMessage<::artemis::proto::prediction::dataset::LaneNode>(Arena*);
template<> ::artemis::proto::prediction::dataset::LaneNodeAttribute* Arena::CreateMaybeMessage<::artemis::proto::prediction::dataset::LaneNodeAttribute>(Arena*);
template<> ::artemis::proto::prediction::dataset::LaneNodeGlobalId* Arena::CreateMaybeMessage<::artemis::proto::prediction::dataset::LaneNodeGlobalId>(Arena*);
template<> ::artemis::proto::prediction::dataset::Metadata* Arena::CreateMaybeMessage<::artemis::proto::prediction::dataset::Metadata>(Arena*);
template<> ::artemis::proto::prediction::dataset::Sample* Arena::CreateMaybeMessage<::artemis::proto::prediction::dataset::Sample>(Arena*);
template<> ::artemis::proto::prediction::dataset::Sequence* Arena::CreateMaybeMessage<::artemis::proto::prediction::dataset::Sequence>(Arena*);
template<> ::artemis::proto::prediction::dataset::Trajectory* Arena::CreateMaybeMessage<::artemis::proto::prediction::dataset::Trajectory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace artemis {
namespace proto {
namespace prediction {
namespace dataset {

enum ActorType : int {
  Vehicle = 0,
  Bicycle = 1,
  Pedestrain = 2,
  Other = 3,
  ActorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ActorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ActorType_IsValid(int value);
constexpr ActorType ActorType_MIN = Vehicle;
constexpr ActorType ActorType_MAX = Other;
constexpr int ActorType_ARRAYSIZE = ActorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorType_descriptor();
template<typename T>
inline const std::string& ActorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActorType_descriptor(), enum_t_value);
}
inline bool ActorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActorType>(
    ActorType_descriptor(), name, value);
}
// ===================================================================

class ActorState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artemis.proto.prediction.dataset.ActorState) */ {
 public:
  inline ActorState() : ActorState(nullptr) {}
  virtual ~ActorState();
  explicit constexpr ActorState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActorState(const ActorState& from);
  ActorState(ActorState&& from) noexcept
    : ActorState() {
    *this = ::std::move(from);
  }

  inline ActorState& operator=(const ActorState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorState& operator=(ActorState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActorState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorState* internal_default_instance() {
    return reinterpret_cast<const ActorState*>(
               &_ActorState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActorState& a, ActorState& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActorState* New() const final {
    return CreateMaybeMessage<ActorState>(nullptr);
  }

  ActorState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActorState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActorState& from);
  void MergeFrom(const ActorState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artemis.proto.prediction.dataset.ActorState";
  }
  protected:
  explicit ActorState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_5fdataset_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kVelFieldNumber = 4,
    kShapeFieldNumber = 6,
    kTimeUsFieldNumber = 1,
    kRotFieldNumber = 3,
    kOmegaFieldNumber = 5,
  };
  // .artemis.proto.prediction.math.Vector2f pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::artemis::proto::prediction::math::Vector2f& pos() const;
  ::artemis::proto::prediction::math::Vector2f* release_pos();
  ::artemis::proto::prediction::math::Vector2f* mutable_pos();
  void set_allocated_pos(::artemis::proto::prediction::math::Vector2f* pos);
  private:
  const ::artemis::proto::prediction::math::Vector2f& _internal_pos() const;
  ::artemis::proto::prediction::math::Vector2f* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::artemis::proto::prediction::math::Vector2f* pos);
  ::artemis::proto::prediction::math::Vector2f* unsafe_arena_release_pos();

  // .artemis.proto.prediction.math.Vector2f vel = 4;
  bool has_vel() const;
  private:
  bool _internal_has_vel() const;
  public:
  void clear_vel();
  const ::artemis::proto::prediction::math::Vector2f& vel() const;
  ::artemis::proto::prediction::math::Vector2f* release_vel();
  ::artemis::proto::prediction::math::Vector2f* mutable_vel();
  void set_allocated_vel(::artemis::proto::prediction::math::Vector2f* vel);
  private:
  const ::artemis::proto::prediction::math::Vector2f& _internal_vel() const;
  ::artemis::proto::prediction::math::Vector2f* _internal_mutable_vel();
  public:
  void unsafe_arena_set_allocated_vel(
      ::artemis::proto::prediction::math::Vector2f* vel);
  ::artemis::proto::prediction::math::Vector2f* unsafe_arena_release_vel();

  // .artemis.proto.prediction.math.Vector2f shape = 6;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::artemis::proto::prediction::math::Vector2f& shape() const;
  ::artemis::proto::prediction::math::Vector2f* release_shape();
  ::artemis::proto::prediction::math::Vector2f* mutable_shape();
  void set_allocated_shape(::artemis::proto::prediction::math::Vector2f* shape);
  private:
  const ::artemis::proto::prediction::math::Vector2f& _internal_shape() const;
  ::artemis::proto::prediction::math::Vector2f* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::artemis::proto::prediction::math::Vector2f* shape);
  ::artemis::proto::prediction::math::Vector2f* unsafe_arena_release_shape();

  // int64 time_us = 1;
  void clear_time_us();
  ::PROTOBUF_NAMESPACE_ID::int64 time_us() const;
  void set_time_us(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_us() const;
  void _internal_set_time_us(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float rot = 3;
  void clear_rot();
  float rot() const;
  void set_rot(float value);
  private:
  float _internal_rot() const;
  void _internal_set_rot(float value);
  public:

  // float omega = 5;
  void clear_omega();
  float omega() const;
  void set_omega(float value);
  private:
  float _internal_omega() const;
  void _internal_set_omega(float value);
  public:

  // @@protoc_insertion_point(class_scope:artemis.proto.prediction.dataset.ActorState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::artemis::proto::prediction::math::Vector2f* pos_;
  ::artemis::proto::prediction::math::Vector2f* vel_;
  ::artemis::proto::prediction::math::Vector2f* shape_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_us_;
  float rot_;
  float omega_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class Trajectory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artemis.proto.prediction.dataset.Trajectory) */ {
 public:
  inline Trajectory() : Trajectory(nullptr) {}
  virtual ~Trajectory();
  explicit constexpr Trajectory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Trajectory(const Trajectory& from);
  Trajectory(Trajectory&& from) noexcept
    : Trajectory() {
    *this = ::std::move(from);
  }

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trajectory& operator=(Trajectory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trajectory& default_instance() {
    return *internal_default_instance();
  }
  static inline const Trajectory* internal_default_instance() {
    return reinterpret_cast<const Trajectory*>(
               &_Trajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Trajectory& a, Trajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(Trajectory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trajectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trajectory* New() const final {
    return CreateMaybeMessage<Trajectory>(nullptr);
  }

  Trajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trajectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trajectory& from);
  void MergeFrom(const Trajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trajectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artemis.proto.prediction.dataset.Trajectory";
  }
  protected:
  explicit Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_5fdataset_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 3,
    kTypeFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // repeated .artemis.proto.prediction.dataset.ActorState states = 3;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::artemis::proto::prediction::dataset::ActorState* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::ActorState >*
      mutable_states();
  private:
  const ::artemis::proto::prediction::dataset::ActorState& _internal_states(int index) const;
  ::artemis::proto::prediction::dataset::ActorState* _internal_add_states();
  public:
  const ::artemis::proto::prediction::dataset::ActorState& states(int index) const;
  ::artemis::proto::prediction::dataset::ActorState* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::ActorState >&
      states() const;

  // .artemis.proto.prediction.dataset.ActorType type = 1;
  void clear_type();
  ::artemis::proto::prediction::dataset::ActorType type() const;
  void set_type(::artemis::proto::prediction::dataset::ActorType value);
  private:
  ::artemis::proto::prediction::dataset::ActorType _internal_type() const;
  void _internal_set_type(::artemis::proto::prediction::dataset::ActorType value);
  public:

  // int32 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:artemis.proto.prediction.dataset.Trajectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::ActorState > states_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class Sequence PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artemis.proto.prediction.dataset.Sequence) */ {
 public:
  inline Sequence() : Sequence(nullptr) {}
  virtual ~Sequence();
  explicit constexpr Sequence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sequence(const Sequence& from);
  Sequence(Sequence&& from) noexcept
    : Sequence() {
    *this = ::std::move(from);
  }

  inline Sequence& operator=(const Sequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sequence& operator=(Sequence&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sequence* internal_default_instance() {
    return reinterpret_cast<const Sequence*>(
               &_Sequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Sequence& a, Sequence& b) {
    a.Swap(&b);
  }
  inline void Swap(Sequence* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sequence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sequence* New() const final {
    return CreateMaybeMessage<Sequence>(nullptr);
  }

  Sequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sequence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sequence& from);
  void MergeFrom(const Sequence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sequence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artemis.proto.prediction.dataset.Sequence";
  }
  protected:
  explicit Sequence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_5fdataset_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoriesFieldNumber = 2,
    kRegionFieldNumber = 1,
  };
  // repeated .artemis.proto.prediction.dataset.Trajectory trajectories = 2;
  int trajectories_size() const;
  private:
  int _internal_trajectories_size() const;
  public:
  void clear_trajectories();
  ::artemis::proto::prediction::dataset::Trajectory* mutable_trajectories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::Trajectory >*
      mutable_trajectories();
  private:
  const ::artemis::proto::prediction::dataset::Trajectory& _internal_trajectories(int index) const;
  ::artemis::proto::prediction::dataset::Trajectory* _internal_add_trajectories();
  public:
  const ::artemis::proto::prediction::dataset::Trajectory& trajectories(int index) const;
  ::artemis::proto::prediction::dataset::Trajectory* add_trajectories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::Trajectory >&
      trajectories() const;

  // string region = 1;
  void clear_region();
  const std::string& region() const;
  void set_region(const std::string& value);
  void set_region(std::string&& value);
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  std::string* mutable_region();
  std::string* release_region();
  void set_allocated_region(std::string* region);
  private:
  const std::string& _internal_region() const;
  void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // @@protoc_insertion_point(class_scope:artemis.proto.prediction.dataset.Sequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::Trajectory > trajectories_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class LaneNodeGlobalId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artemis.proto.prediction.dataset.LaneNodeGlobalId) */ {
 public:
  inline LaneNodeGlobalId() : LaneNodeGlobalId(nullptr) {}
  virtual ~LaneNodeGlobalId();
  explicit constexpr LaneNodeGlobalId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneNodeGlobalId(const LaneNodeGlobalId& from);
  LaneNodeGlobalId(LaneNodeGlobalId&& from) noexcept
    : LaneNodeGlobalId() {
    *this = ::std::move(from);
  }

  inline LaneNodeGlobalId& operator=(const LaneNodeGlobalId& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneNodeGlobalId& operator=(LaneNodeGlobalId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneNodeGlobalId& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneNodeGlobalId* internal_default_instance() {
    return reinterpret_cast<const LaneNodeGlobalId*>(
               &_LaneNodeGlobalId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LaneNodeGlobalId& a, LaneNodeGlobalId& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneNodeGlobalId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneNodeGlobalId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneNodeGlobalId* New() const final {
    return CreateMaybeMessage<LaneNodeGlobalId>(nullptr);
  }

  LaneNodeGlobalId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneNodeGlobalId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneNodeGlobalId& from);
  void MergeFrom(const LaneNodeGlobalId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneNodeGlobalId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artemis.proto.prediction.dataset.LaneNodeGlobalId";
  }
  protected:
  explicit LaneNodeGlobalId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_5fdataset_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kSegmentIdFieldNumber = 3,
  };
  // int32 tile_id = 1;
  void clear_tile_id();
  ::PROTOBUF_NAMESPACE_ID::int32 tile_id() const;
  void set_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tile_id() const;
  void _internal_set_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 item_id = 2;
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::int32 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 segment_id = 3;
  void clear_segment_id();
  ::PROTOBUF_NAMESPACE_ID::int32 segment_id() const;
  void set_segment_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_segment_id() const;
  void _internal_set_segment_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:artemis.proto.prediction.dataset.LaneNodeGlobalId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 tile_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 item_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 segment_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class LaneNodeAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artemis.proto.prediction.dataset.LaneNodeAttribute) */ {
 public:
  inline LaneNodeAttribute() : LaneNodeAttribute(nullptr) {}
  virtual ~LaneNodeAttribute();
  explicit constexpr LaneNodeAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneNodeAttribute(const LaneNodeAttribute& from);
  LaneNodeAttribute(LaneNodeAttribute&& from) noexcept
    : LaneNodeAttribute() {
    *this = ::std::move(from);
  }

  inline LaneNodeAttribute& operator=(const LaneNodeAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneNodeAttribute& operator=(LaneNodeAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneNodeAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneNodeAttribute* internal_default_instance() {
    return reinterpret_cast<const LaneNodeAttribute*>(
               &_LaneNodeAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LaneNodeAttribute& a, LaneNodeAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneNodeAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneNodeAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneNodeAttribute* New() const final {
    return CreateMaybeMessage<LaneNodeAttribute>(nullptr);
  }

  LaneNodeAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneNodeAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneNodeAttribute& from);
  void MergeFrom(const LaneNodeAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneNodeAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artemis.proto.prediction.dataset.LaneNodeAttribute";
  }
  protected:
  explicit LaneNodeAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_5fdataset_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // .artemis.proto.prediction.math.Vector2f start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::artemis::proto::prediction::math::Vector2f& start() const;
  ::artemis::proto::prediction::math::Vector2f* release_start();
  ::artemis::proto::prediction::math::Vector2f* mutable_start();
  void set_allocated_start(::artemis::proto::prediction::math::Vector2f* start);
  private:
  const ::artemis::proto::prediction::math::Vector2f& _internal_start() const;
  ::artemis::proto::prediction::math::Vector2f* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::artemis::proto::prediction::math::Vector2f* start);
  ::artemis::proto::prediction::math::Vector2f* unsafe_arena_release_start();

  // .artemis.proto.prediction.math.Vector2f end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::artemis::proto::prediction::math::Vector2f& end() const;
  ::artemis::proto::prediction::math::Vector2f* release_end();
  ::artemis::proto::prediction::math::Vector2f* mutable_end();
  void set_allocated_end(::artemis::proto::prediction::math::Vector2f* end);
  private:
  const ::artemis::proto::prediction::math::Vector2f& _internal_end() const;
  ::artemis::proto::prediction::math::Vector2f* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::artemis::proto::prediction::math::Vector2f* end);
  ::artemis::proto::prediction::math::Vector2f* unsafe_arena_release_end();

  // @@protoc_insertion_point(class_scope:artemis.proto.prediction.dataset.LaneNodeAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::artemis::proto::prediction::math::Vector2f* start_;
  ::artemis::proto::prediction::math::Vector2f* end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class LaneNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artemis.proto.prediction.dataset.LaneNode) */ {
 public:
  inline LaneNode() : LaneNode(nullptr) {}
  virtual ~LaneNode();
  explicit constexpr LaneNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneNode(const LaneNode& from);
  LaneNode(LaneNode&& from) noexcept
    : LaneNode() {
    *this = ::std::move(from);
  }

  inline LaneNode& operator=(const LaneNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneNode& operator=(LaneNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneNode* internal_default_instance() {
    return reinterpret_cast<const LaneNode*>(
               &_LaneNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LaneNode& a, LaneNode& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneNode* New() const final {
    return CreateMaybeMessage<LaneNode>(nullptr);
  }

  LaneNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneNode& from);
  void MergeFrom(const LaneNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artemis.proto.prediction.dataset.LaneNode";
  }
  protected:
  explicit LaneNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_5fdataset_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredecessorsFieldNumber = 4,
    kSuccessorsFieldNumber = 5,
    kGlobalIdFieldNumber = 1,
    kAttributeFieldNumber = 3,
    kLocalIdFieldNumber = 2,
    kLeftNeighbourFieldNumber = 6,
    kRightNeighbourFieldNumber = 7,
    kFatherComponentFieldNumber = 8,
  };
  // repeated int32 predecessors = 4;
  int predecessors_size() const;
  private:
  int _internal_predecessors_size() const;
  public:
  void clear_predecessors();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_predecessors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_predecessors() const;
  void _internal_add_predecessors(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_predecessors();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 predecessors(int index) const;
  void set_predecessors(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_predecessors(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      predecessors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_predecessors();

  // repeated int32 successors = 5;
  int successors_size() const;
  private:
  int _internal_successors_size() const;
  public:
  void clear_successors();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_successors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_successors() const;
  void _internal_add_successors(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_successors();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 successors(int index) const;
  void set_successors(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_successors(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      successors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_successors();

  // .artemis.proto.prediction.dataset.LaneNodeGlobalId global_id = 1;
  bool has_global_id() const;
  private:
  bool _internal_has_global_id() const;
  public:
  void clear_global_id();
  const ::artemis::proto::prediction::dataset::LaneNodeGlobalId& global_id() const;
  ::artemis::proto::prediction::dataset::LaneNodeGlobalId* release_global_id();
  ::artemis::proto::prediction::dataset::LaneNodeGlobalId* mutable_global_id();
  void set_allocated_global_id(::artemis::proto::prediction::dataset::LaneNodeGlobalId* global_id);
  private:
  const ::artemis::proto::prediction::dataset::LaneNodeGlobalId& _internal_global_id() const;
  ::artemis::proto::prediction::dataset::LaneNodeGlobalId* _internal_mutable_global_id();
  public:
  void unsafe_arena_set_allocated_global_id(
      ::artemis::proto::prediction::dataset::LaneNodeGlobalId* global_id);
  ::artemis::proto::prediction::dataset::LaneNodeGlobalId* unsafe_arena_release_global_id();

  // .artemis.proto.prediction.dataset.LaneNodeAttribute attribute = 3;
  bool has_attribute() const;
  private:
  bool _internal_has_attribute() const;
  public:
  void clear_attribute();
  const ::artemis::proto::prediction::dataset::LaneNodeAttribute& attribute() const;
  ::artemis::proto::prediction::dataset::LaneNodeAttribute* release_attribute();
  ::artemis::proto::prediction::dataset::LaneNodeAttribute* mutable_attribute();
  void set_allocated_attribute(::artemis::proto::prediction::dataset::LaneNodeAttribute* attribute);
  private:
  const ::artemis::proto::prediction::dataset::LaneNodeAttribute& _internal_attribute() const;
  ::artemis::proto::prediction::dataset::LaneNodeAttribute* _internal_mutable_attribute();
  public:
  void unsafe_arena_set_allocated_attribute(
      ::artemis::proto::prediction::dataset::LaneNodeAttribute* attribute);
  ::artemis::proto::prediction::dataset::LaneNodeAttribute* unsafe_arena_release_attribute();

  // int32 local_id = 2;
  void clear_local_id();
  ::PROTOBUF_NAMESPACE_ID::int32 local_id() const;
  void set_local_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_local_id() const;
  void _internal_set_local_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 left_neighbour = 6;
  void clear_left_neighbour();
  ::PROTOBUF_NAMESPACE_ID::int32 left_neighbour() const;
  void set_left_neighbour(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left_neighbour() const;
  void _internal_set_left_neighbour(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 right_neighbour = 7;
  void clear_right_neighbour();
  ::PROTOBUF_NAMESPACE_ID::int32 right_neighbour() const;
  void set_right_neighbour(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_right_neighbour() const;
  void _internal_set_right_neighbour(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 father_component = 8;
  void clear_father_component();
  ::PROTOBUF_NAMESPACE_ID::int32 father_component() const;
  void set_father_component(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_father_component() const;
  void _internal_set_father_component(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:artemis.proto.prediction.dataset.LaneNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > predecessors_;
  mutable std::atomic<int> _predecessors_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > successors_;
  mutable std::atomic<int> _successors_cached_byte_size_;
  ::artemis::proto::prediction::dataset::LaneNodeGlobalId* global_id_;
  ::artemis::proto::prediction::dataset::LaneNodeAttribute* attribute_;
  ::PROTOBUF_NAMESPACE_ID::int32 local_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_neighbour_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_neighbour_;
  ::PROTOBUF_NAMESPACE_ID::int32 father_component_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class LaneComponent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artemis.proto.prediction.dataset.LaneComponent) */ {
 public:
  inline LaneComponent() : LaneComponent(nullptr) {}
  virtual ~LaneComponent();
  explicit constexpr LaneComponent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneComponent(const LaneComponent& from);
  LaneComponent(LaneComponent&& from) noexcept
    : LaneComponent() {
    *this = ::std::move(from);
  }

  inline LaneComponent& operator=(const LaneComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneComponent& operator=(LaneComponent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneComponent& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneComponent* internal_default_instance() {
    return reinterpret_cast<const LaneComponent*>(
               &_LaneComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LaneComponent& a, LaneComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneComponent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneComponent* New() const final {
    return CreateMaybeMessage<LaneComponent>(nullptr);
  }

  LaneComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneComponent& from);
  void MergeFrom(const LaneComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artemis.proto.prediction.dataset.LaneComponent";
  }
  protected:
  explicit LaneComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_5fdataset_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSonNodesFieldNumber = 2,
    kPredecessorsFieldNumber = 3,
    kSuccessorsFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // repeated int32 son_nodes = 2;
  int son_nodes_size() const;
  private:
  int _internal_son_nodes_size() const;
  public:
  void clear_son_nodes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_son_nodes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_son_nodes() const;
  void _internal_add_son_nodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_son_nodes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 son_nodes(int index) const;
  void set_son_nodes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_son_nodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      son_nodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_son_nodes();

  // repeated int32 predecessors = 3;
  int predecessors_size() const;
  private:
  int _internal_predecessors_size() const;
  public:
  void clear_predecessors();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_predecessors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_predecessors() const;
  void _internal_add_predecessors(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_predecessors();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 predecessors(int index) const;
  void set_predecessors(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_predecessors(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      predecessors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_predecessors();

  // repeated int32 successors = 4;
  int successors_size() const;
  private:
  int _internal_successors_size() const;
  public:
  void clear_successors();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_successors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_successors() const;
  void _internal_add_successors(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_successors();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 successors(int index) const;
  void set_successors(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_successors(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      successors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_successors();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:artemis.proto.prediction.dataset.LaneComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > son_nodes_;
  mutable std::atomic<int> _son_nodes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > predecessors_;
  mutable std::atomic<int> _predecessors_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > successors_;
  mutable std::atomic<int> _successors_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class LaneGraph PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artemis.proto.prediction.dataset.LaneGraph) */ {
 public:
  inline LaneGraph() : LaneGraph(nullptr) {}
  virtual ~LaneGraph();
  explicit constexpr LaneGraph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneGraph(const LaneGraph& from);
  LaneGraph(LaneGraph&& from) noexcept
    : LaneGraph() {
    *this = ::std::move(from);
  }

  inline LaneGraph& operator=(const LaneGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneGraph& operator=(LaneGraph&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneGraph& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneGraph* internal_default_instance() {
    return reinterpret_cast<const LaneGraph*>(
               &_LaneGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LaneGraph& a, LaneGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneGraph* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneGraph* New() const final {
    return CreateMaybeMessage<LaneGraph>(nullptr);
  }

  LaneGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneGraph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneGraph& from);
  void MergeFrom(const LaneGraph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneGraph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artemis.proto.prediction.dataset.LaneGraph";
  }
  protected:
  explicit LaneGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_5fdataset_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneNodesFieldNumber = 1,
    kLaneComponentsFieldNumber = 2,
  };
  // repeated .artemis.proto.prediction.dataset.LaneNode lane_nodes = 1;
  int lane_nodes_size() const;
  private:
  int _internal_lane_nodes_size() const;
  public:
  void clear_lane_nodes();
  ::artemis::proto::prediction::dataset::LaneNode* mutable_lane_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::LaneNode >*
      mutable_lane_nodes();
  private:
  const ::artemis::proto::prediction::dataset::LaneNode& _internal_lane_nodes(int index) const;
  ::artemis::proto::prediction::dataset::LaneNode* _internal_add_lane_nodes();
  public:
  const ::artemis::proto::prediction::dataset::LaneNode& lane_nodes(int index) const;
  ::artemis::proto::prediction::dataset::LaneNode* add_lane_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::LaneNode >&
      lane_nodes() const;

  // repeated .artemis.proto.prediction.dataset.LaneComponent lane_components = 2;
  int lane_components_size() const;
  private:
  int _internal_lane_components_size() const;
  public:
  void clear_lane_components();
  ::artemis::proto::prediction::dataset::LaneComponent* mutable_lane_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::LaneComponent >*
      mutable_lane_components();
  private:
  const ::artemis::proto::prediction::dataset::LaneComponent& _internal_lane_components(int index) const;
  ::artemis::proto::prediction::dataset::LaneComponent* _internal_add_lane_components();
  public:
  const ::artemis::proto::prediction::dataset::LaneComponent& lane_components(int index) const;
  ::artemis::proto::prediction::dataset::LaneComponent* add_lane_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::LaneComponent >&
      lane_components() const;

  // @@protoc_insertion_point(class_scope:artemis.proto.prediction.dataset.LaneGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::LaneNode > lane_nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::LaneComponent > lane_components_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class Sample PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artemis.proto.prediction.dataset.Sample) */ {
 public:
  inline Sample() : Sample(nullptr) {}
  virtual ~Sample();
  explicit constexpr Sample(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sample(const Sample& from);
  Sample(Sample&& from) noexcept
    : Sample() {
    *this = ::std::move(from);
  }

  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sample& operator=(Sample&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sample& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sample* internal_default_instance() {
    return reinterpret_cast<const Sample*>(
               &_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Sample& a, Sample& b) {
    a.Swap(&b);
  }
  inline void Swap(Sample* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sample* New() const final {
    return CreateMaybeMessage<Sample>(nullptr);
  }

  Sample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sample>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sample& from);
  void MergeFrom(const Sample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artemis.proto.prediction.dataset.Sample";
  }
  protected:
  explicit Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_5fdataset_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoriesFieldNumber = 1,
    kLaneGraphFieldNumber = 2,
    kAttentionFieldNumber = 3,
    kIntentionFieldNumber = 4,
  };
  // repeated .artemis.proto.prediction.dataset.Trajectory trajectories = 1;
  int trajectories_size() const;
  private:
  int _internal_trajectories_size() const;
  public:
  void clear_trajectories();
  ::artemis::proto::prediction::dataset::Trajectory* mutable_trajectories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::Trajectory >*
      mutable_trajectories();
  private:
  const ::artemis::proto::prediction::dataset::Trajectory& _internal_trajectories(int index) const;
  ::artemis::proto::prediction::dataset::Trajectory* _internal_add_trajectories();
  public:
  const ::artemis::proto::prediction::dataset::Trajectory& trajectories(int index) const;
  ::artemis::proto::prediction::dataset::Trajectory* add_trajectories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::Trajectory >&
      trajectories() const;

  // .artemis.proto.prediction.dataset.LaneGraph lane_graph = 2;
  bool has_lane_graph() const;
  private:
  bool _internal_has_lane_graph() const;
  public:
  void clear_lane_graph();
  const ::artemis::proto::prediction::dataset::LaneGraph& lane_graph() const;
  ::artemis::proto::prediction::dataset::LaneGraph* release_lane_graph();
  ::artemis::proto::prediction::dataset::LaneGraph* mutable_lane_graph();
  void set_allocated_lane_graph(::artemis::proto::prediction::dataset::LaneGraph* lane_graph);
  private:
  const ::artemis::proto::prediction::dataset::LaneGraph& _internal_lane_graph() const;
  ::artemis::proto::prediction::dataset::LaneGraph* _internal_mutable_lane_graph();
  public:
  void unsafe_arena_set_allocated_lane_graph(
      ::artemis::proto::prediction::dataset::LaneGraph* lane_graph);
  ::artemis::proto::prediction::dataset::LaneGraph* unsafe_arena_release_lane_graph();

  // int32 attention = 3;
  void clear_attention();
  ::PROTOBUF_NAMESPACE_ID::int32 attention() const;
  void set_attention(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attention() const;
  void _internal_set_attention(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 intention = 4;
  void clear_intention();
  ::PROTOBUF_NAMESPACE_ID::int32 intention() const;
  void set_intention(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intention() const;
  void _internal_set_intention(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:artemis.proto.prediction.dataset.Sample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::Trajectory > trajectories_;
  ::artemis::proto::prediction::dataset::LaneGraph* lane_graph_;
  ::PROTOBUF_NAMESPACE_ID::int32 attention_;
  ::PROTOBUF_NAMESPACE_ID::int32 intention_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class Metadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artemis.proto.prediction.dataset.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  virtual ~Metadata();
  explicit constexpr Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metadata* New() const final {
    return CreateMaybeMessage<Metadata>(nullptr);
  }

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artemis.proto.prediction.dataset.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_5fdataset_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceNameListFieldNumber = 1,
    kSampleNameListFieldNumber = 2,
  };
  // repeated string sequence_name_list = 1;
  int sequence_name_list_size() const;
  private:
  int _internal_sequence_name_list_size() const;
  public:
  void clear_sequence_name_list();
  const std::string& sequence_name_list(int index) const;
  std::string* mutable_sequence_name_list(int index);
  void set_sequence_name_list(int index, const std::string& value);
  void set_sequence_name_list(int index, std::string&& value);
  void set_sequence_name_list(int index, const char* value);
  void set_sequence_name_list(int index, const char* value, size_t size);
  std::string* add_sequence_name_list();
  void add_sequence_name_list(const std::string& value);
  void add_sequence_name_list(std::string&& value);
  void add_sequence_name_list(const char* value);
  void add_sequence_name_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sequence_name_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sequence_name_list();
  private:
  const std::string& _internal_sequence_name_list(int index) const;
  std::string* _internal_add_sequence_name_list();
  public:

  // repeated string sample_name_list = 2;
  int sample_name_list_size() const;
  private:
  int _internal_sample_name_list_size() const;
  public:
  void clear_sample_name_list();
  const std::string& sample_name_list(int index) const;
  std::string* mutable_sample_name_list(int index);
  void set_sample_name_list(int index, const std::string& value);
  void set_sample_name_list(int index, std::string&& value);
  void set_sample_name_list(int index, const char* value);
  void set_sample_name_list(int index, const char* value, size_t size);
  std::string* add_sample_name_list();
  void add_sample_name_list(const std::string& value);
  void add_sample_name_list(std::string&& value);
  void add_sample_name_list(const char* value);
  void add_sample_name_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sample_name_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sample_name_list();
  private:
  const std::string& _internal_sample_name_list(int index) const;
  std::string* _internal_add_sample_name_list();
  public:

  // @@protoc_insertion_point(class_scope:artemis.proto.prediction.dataset.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sequence_name_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sample_name_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_5fdataset_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActorState

// int64 time_us = 1;
inline void ActorState::clear_time_us() {
  time_us_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActorState::_internal_time_us() const {
  return time_us_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActorState::time_us() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.ActorState.time_us)
  return _internal_time_us();
}
inline void ActorState::_internal_set_time_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_us_ = value;
}
inline void ActorState::set_time_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_us(value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.ActorState.time_us)
}

// .artemis.proto.prediction.math.Vector2f pos = 2;
inline bool ActorState::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool ActorState::has_pos() const {
  return _internal_has_pos();
}
inline const ::artemis::proto::prediction::math::Vector2f& ActorState::_internal_pos() const {
  const ::artemis::proto::prediction::math::Vector2f* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::artemis::proto::prediction::math::Vector2f&>(
      ::artemis::proto::prediction::math::_Vector2f_default_instance_);
}
inline const ::artemis::proto::prediction::math::Vector2f& ActorState::pos() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.ActorState.pos)
  return _internal_pos();
}
inline void ActorState::unsafe_arena_set_allocated_pos(
    ::artemis::proto::prediction::math::Vector2f* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:artemis.proto.prediction.dataset.ActorState.pos)
}
inline ::artemis::proto::prediction::math::Vector2f* ActorState::release_pos() {
  
  ::artemis::proto::prediction::math::Vector2f* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::artemis::proto::prediction::math::Vector2f* ActorState::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:artemis.proto.prediction.dataset.ActorState.pos)
  
  ::artemis::proto::prediction::math::Vector2f* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::artemis::proto::prediction::math::Vector2f* ActorState::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::artemis::proto::prediction::math::Vector2f>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::artemis::proto::prediction::math::Vector2f* ActorState::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:artemis.proto.prediction.dataset.ActorState.pos)
  return _internal_mutable_pos();
}
inline void ActorState::set_allocated_pos(::artemis::proto::prediction::math::Vector2f* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos)->GetArena();
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:artemis.proto.prediction.dataset.ActorState.pos)
}

// float rot = 3;
inline void ActorState::clear_rot() {
  rot_ = 0;
}
inline float ActorState::_internal_rot() const {
  return rot_;
}
inline float ActorState::rot() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.ActorState.rot)
  return _internal_rot();
}
inline void ActorState::_internal_set_rot(float value) {
  
  rot_ = value;
}
inline void ActorState::set_rot(float value) {
  _internal_set_rot(value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.ActorState.rot)
}

// .artemis.proto.prediction.math.Vector2f vel = 4;
inline bool ActorState::_internal_has_vel() const {
  return this != internal_default_instance() && vel_ != nullptr;
}
inline bool ActorState::has_vel() const {
  return _internal_has_vel();
}
inline const ::artemis::proto::prediction::math::Vector2f& ActorState::_internal_vel() const {
  const ::artemis::proto::prediction::math::Vector2f* p = vel_;
  return p != nullptr ? *p : reinterpret_cast<const ::artemis::proto::prediction::math::Vector2f&>(
      ::artemis::proto::prediction::math::_Vector2f_default_instance_);
}
inline const ::artemis::proto::prediction::math::Vector2f& ActorState::vel() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.ActorState.vel)
  return _internal_vel();
}
inline void ActorState::unsafe_arena_set_allocated_vel(
    ::artemis::proto::prediction::math::Vector2f* vel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_);
  }
  vel_ = vel;
  if (vel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:artemis.proto.prediction.dataset.ActorState.vel)
}
inline ::artemis::proto::prediction::math::Vector2f* ActorState::release_vel() {
  
  ::artemis::proto::prediction::math::Vector2f* temp = vel_;
  vel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::artemis::proto::prediction::math::Vector2f* ActorState::unsafe_arena_release_vel() {
  // @@protoc_insertion_point(field_release:artemis.proto.prediction.dataset.ActorState.vel)
  
  ::artemis::proto::prediction::math::Vector2f* temp = vel_;
  vel_ = nullptr;
  return temp;
}
inline ::artemis::proto::prediction::math::Vector2f* ActorState::_internal_mutable_vel() {
  
  if (vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::artemis::proto::prediction::math::Vector2f>(GetArena());
    vel_ = p;
  }
  return vel_;
}
inline ::artemis::proto::prediction::math::Vector2f* ActorState::mutable_vel() {
  // @@protoc_insertion_point(field_mutable:artemis.proto.prediction.dataset.ActorState.vel)
  return _internal_mutable_vel();
}
inline void ActorState::set_allocated_vel(::artemis::proto::prediction::math::Vector2f* vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_);
  }
  if (vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel)->GetArena();
    if (message_arena != submessage_arena) {
      vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    
  } else {
    
  }
  vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:artemis.proto.prediction.dataset.ActorState.vel)
}

// float omega = 5;
inline void ActorState::clear_omega() {
  omega_ = 0;
}
inline float ActorState::_internal_omega() const {
  return omega_;
}
inline float ActorState::omega() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.ActorState.omega)
  return _internal_omega();
}
inline void ActorState::_internal_set_omega(float value) {
  
  omega_ = value;
}
inline void ActorState::set_omega(float value) {
  _internal_set_omega(value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.ActorState.omega)
}

// .artemis.proto.prediction.math.Vector2f shape = 6;
inline bool ActorState::_internal_has_shape() const {
  return this != internal_default_instance() && shape_ != nullptr;
}
inline bool ActorState::has_shape() const {
  return _internal_has_shape();
}
inline const ::artemis::proto::prediction::math::Vector2f& ActorState::_internal_shape() const {
  const ::artemis::proto::prediction::math::Vector2f* p = shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::artemis::proto::prediction::math::Vector2f&>(
      ::artemis::proto::prediction::math::_Vector2f_default_instance_);
}
inline const ::artemis::proto::prediction::math::Vector2f& ActorState::shape() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.ActorState.shape)
  return _internal_shape();
}
inline void ActorState::unsafe_arena_set_allocated_shape(
    ::artemis::proto::prediction::math::Vector2f* shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:artemis.proto.prediction.dataset.ActorState.shape)
}
inline ::artemis::proto::prediction::math::Vector2f* ActorState::release_shape() {
  
  ::artemis::proto::prediction::math::Vector2f* temp = shape_;
  shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::artemis::proto::prediction::math::Vector2f* ActorState::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:artemis.proto.prediction.dataset.ActorState.shape)
  
  ::artemis::proto::prediction::math::Vector2f* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::artemis::proto::prediction::math::Vector2f* ActorState::_internal_mutable_shape() {
  
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::artemis::proto::prediction::math::Vector2f>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::artemis::proto::prediction::math::Vector2f* ActorState::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:artemis.proto.prediction.dataset.ActorState.shape)
  return _internal_mutable_shape();
}
inline void ActorState::set_allocated_shape(::artemis::proto::prediction::math::Vector2f* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape)->GetArena();
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:artemis.proto.prediction.dataset.ActorState.shape)
}

// -------------------------------------------------------------------

// Trajectory

// .artemis.proto.prediction.dataset.ActorType type = 1;
inline void Trajectory::clear_type() {
  type_ = 0;
}
inline ::artemis::proto::prediction::dataset::ActorType Trajectory::_internal_type() const {
  return static_cast< ::artemis::proto::prediction::dataset::ActorType >(type_);
}
inline ::artemis::proto::prediction::dataset::ActorType Trajectory::type() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.Trajectory.type)
  return _internal_type();
}
inline void Trajectory::_internal_set_type(::artemis::proto::prediction::dataset::ActorType value) {
  
  type_ = value;
}
inline void Trajectory::set_type(::artemis::proto::prediction::dataset::ActorType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.Trajectory.type)
}

// int32 offset = 2;
inline void Trajectory::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trajectory::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trajectory::offset() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.Trajectory.offset)
  return _internal_offset();
}
inline void Trajectory::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void Trajectory::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.Trajectory.offset)
}

// repeated .artemis.proto.prediction.dataset.ActorState states = 3;
inline int Trajectory::_internal_states_size() const {
  return states_.size();
}
inline int Trajectory::states_size() const {
  return _internal_states_size();
}
inline void Trajectory::clear_states() {
  states_.Clear();
}
inline ::artemis::proto::prediction::dataset::ActorState* Trajectory::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:artemis.proto.prediction.dataset.Trajectory.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::ActorState >*
Trajectory::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:artemis.proto.prediction.dataset.Trajectory.states)
  return &states_;
}
inline const ::artemis::proto::prediction::dataset::ActorState& Trajectory::_internal_states(int index) const {
  return states_.Get(index);
}
inline const ::artemis::proto::prediction::dataset::ActorState& Trajectory::states(int index) const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.Trajectory.states)
  return _internal_states(index);
}
inline ::artemis::proto::prediction::dataset::ActorState* Trajectory::_internal_add_states() {
  return states_.Add();
}
inline ::artemis::proto::prediction::dataset::ActorState* Trajectory::add_states() {
  // @@protoc_insertion_point(field_add:artemis.proto.prediction.dataset.Trajectory.states)
  return _internal_add_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::ActorState >&
Trajectory::states() const {
  // @@protoc_insertion_point(field_list:artemis.proto.prediction.dataset.Trajectory.states)
  return states_;
}

// -------------------------------------------------------------------

// Sequence

// string region = 1;
inline void Sequence::clear_region() {
  region_.ClearToEmpty();
}
inline const std::string& Sequence::region() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.Sequence.region)
  return _internal_region();
}
inline void Sequence::set_region(const std::string& value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.Sequence.region)
}
inline std::string* Sequence::mutable_region() {
  // @@protoc_insertion_point(field_mutable:artemis.proto.prediction.dataset.Sequence.region)
  return _internal_mutable_region();
}
inline const std::string& Sequence::_internal_region() const {
  return region_.Get();
}
inline void Sequence::_internal_set_region(const std::string& value) {
  
  region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Sequence::set_region(std::string&& value) {
  
  region_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:artemis.proto.prediction.dataset.Sequence.region)
}
inline void Sequence::set_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:artemis.proto.prediction.dataset.Sequence.region)
}
inline void Sequence::set_region(const char* value,
    size_t size) {
  
  region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:artemis.proto.prediction.dataset.Sequence.region)
}
inline std::string* Sequence::_internal_mutable_region() {
  
  return region_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Sequence::release_region() {
  // @@protoc_insertion_point(field_release:artemis.proto.prediction.dataset.Sequence.region)
  return region_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Sequence::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  region_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), region,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:artemis.proto.prediction.dataset.Sequence.region)
}

// repeated .artemis.proto.prediction.dataset.Trajectory trajectories = 2;
inline int Sequence::_internal_trajectories_size() const {
  return trajectories_.size();
}
inline int Sequence::trajectories_size() const {
  return _internal_trajectories_size();
}
inline void Sequence::clear_trajectories() {
  trajectories_.Clear();
}
inline ::artemis::proto::prediction::dataset::Trajectory* Sequence::mutable_trajectories(int index) {
  // @@protoc_insertion_point(field_mutable:artemis.proto.prediction.dataset.Sequence.trajectories)
  return trajectories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::Trajectory >*
Sequence::mutable_trajectories() {
  // @@protoc_insertion_point(field_mutable_list:artemis.proto.prediction.dataset.Sequence.trajectories)
  return &trajectories_;
}
inline const ::artemis::proto::prediction::dataset::Trajectory& Sequence::_internal_trajectories(int index) const {
  return trajectories_.Get(index);
}
inline const ::artemis::proto::prediction::dataset::Trajectory& Sequence::trajectories(int index) const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.Sequence.trajectories)
  return _internal_trajectories(index);
}
inline ::artemis::proto::prediction::dataset::Trajectory* Sequence::_internal_add_trajectories() {
  return trajectories_.Add();
}
inline ::artemis::proto::prediction::dataset::Trajectory* Sequence::add_trajectories() {
  // @@protoc_insertion_point(field_add:artemis.proto.prediction.dataset.Sequence.trajectories)
  return _internal_add_trajectories();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::Trajectory >&
Sequence::trajectories() const {
  // @@protoc_insertion_point(field_list:artemis.proto.prediction.dataset.Sequence.trajectories)
  return trajectories_;
}

// -------------------------------------------------------------------

// LaneNodeGlobalId

// int32 tile_id = 1;
inline void LaneNodeGlobalId::clear_tile_id() {
  tile_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNodeGlobalId::_internal_tile_id() const {
  return tile_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNodeGlobalId::tile_id() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneNodeGlobalId.tile_id)
  return _internal_tile_id();
}
inline void LaneNodeGlobalId::_internal_set_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tile_id_ = value;
}
inline void LaneNodeGlobalId::set_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tile_id(value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.LaneNodeGlobalId.tile_id)
}

// int32 item_id = 2;
inline void LaneNodeGlobalId::clear_item_id() {
  item_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNodeGlobalId::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNodeGlobalId::item_id() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneNodeGlobalId.item_id)
  return _internal_item_id();
}
inline void LaneNodeGlobalId::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  item_id_ = value;
}
inline void LaneNodeGlobalId::set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.LaneNodeGlobalId.item_id)
}

// int32 segment_id = 3;
inline void LaneNodeGlobalId::clear_segment_id() {
  segment_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNodeGlobalId::_internal_segment_id() const {
  return segment_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNodeGlobalId::segment_id() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneNodeGlobalId.segment_id)
  return _internal_segment_id();
}
inline void LaneNodeGlobalId::_internal_set_segment_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  segment_id_ = value;
}
inline void LaneNodeGlobalId::set_segment_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_segment_id(value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.LaneNodeGlobalId.segment_id)
}

// -------------------------------------------------------------------

// LaneNodeAttribute

// .artemis.proto.prediction.math.Vector2f start = 1;
inline bool LaneNodeAttribute::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool LaneNodeAttribute::has_start() const {
  return _internal_has_start();
}
inline const ::artemis::proto::prediction::math::Vector2f& LaneNodeAttribute::_internal_start() const {
  const ::artemis::proto::prediction::math::Vector2f* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const ::artemis::proto::prediction::math::Vector2f&>(
      ::artemis::proto::prediction::math::_Vector2f_default_instance_);
}
inline const ::artemis::proto::prediction::math::Vector2f& LaneNodeAttribute::start() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneNodeAttribute.start)
  return _internal_start();
}
inline void LaneNodeAttribute::unsafe_arena_set_allocated_start(
    ::artemis::proto::prediction::math::Vector2f* start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:artemis.proto.prediction.dataset.LaneNodeAttribute.start)
}
inline ::artemis::proto::prediction::math::Vector2f* LaneNodeAttribute::release_start() {
  
  ::artemis::proto::prediction::math::Vector2f* temp = start_;
  start_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::artemis::proto::prediction::math::Vector2f* LaneNodeAttribute::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:artemis.proto.prediction.dataset.LaneNodeAttribute.start)
  
  ::artemis::proto::prediction::math::Vector2f* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::artemis::proto::prediction::math::Vector2f* LaneNodeAttribute::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::artemis::proto::prediction::math::Vector2f>(GetArena());
    start_ = p;
  }
  return start_;
}
inline ::artemis::proto::prediction::math::Vector2f* LaneNodeAttribute::mutable_start() {
  // @@protoc_insertion_point(field_mutable:artemis.proto.prediction.dataset.LaneNodeAttribute.start)
  return _internal_mutable_start();
}
inline void LaneNodeAttribute::set_allocated_start(::artemis::proto::prediction::math::Vector2f* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:artemis.proto.prediction.dataset.LaneNodeAttribute.start)
}

// .artemis.proto.prediction.math.Vector2f end = 2;
inline bool LaneNodeAttribute::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool LaneNodeAttribute::has_end() const {
  return _internal_has_end();
}
inline const ::artemis::proto::prediction::math::Vector2f& LaneNodeAttribute::_internal_end() const {
  const ::artemis::proto::prediction::math::Vector2f* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const ::artemis::proto::prediction::math::Vector2f&>(
      ::artemis::proto::prediction::math::_Vector2f_default_instance_);
}
inline const ::artemis::proto::prediction::math::Vector2f& LaneNodeAttribute::end() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneNodeAttribute.end)
  return _internal_end();
}
inline void LaneNodeAttribute::unsafe_arena_set_allocated_end(
    ::artemis::proto::prediction::math::Vector2f* end) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:artemis.proto.prediction.dataset.LaneNodeAttribute.end)
}
inline ::artemis::proto::prediction::math::Vector2f* LaneNodeAttribute::release_end() {
  
  ::artemis::proto::prediction::math::Vector2f* temp = end_;
  end_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::artemis::proto::prediction::math::Vector2f* LaneNodeAttribute::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:artemis.proto.prediction.dataset.LaneNodeAttribute.end)
  
  ::artemis::proto::prediction::math::Vector2f* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::artemis::proto::prediction::math::Vector2f* LaneNodeAttribute::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::artemis::proto::prediction::math::Vector2f>(GetArena());
    end_ = p;
  }
  return end_;
}
inline ::artemis::proto::prediction::math::Vector2f* LaneNodeAttribute::mutable_end() {
  // @@protoc_insertion_point(field_mutable:artemis.proto.prediction.dataset.LaneNodeAttribute.end)
  return _internal_mutable_end();
}
inline void LaneNodeAttribute::set_allocated_end(::artemis::proto::prediction::math::Vector2f* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end)->GetArena();
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:artemis.proto.prediction.dataset.LaneNodeAttribute.end)
}

// -------------------------------------------------------------------

// LaneNode

// .artemis.proto.prediction.dataset.LaneNodeGlobalId global_id = 1;
inline bool LaneNode::_internal_has_global_id() const {
  return this != internal_default_instance() && global_id_ != nullptr;
}
inline bool LaneNode::has_global_id() const {
  return _internal_has_global_id();
}
inline void LaneNode::clear_global_id() {
  if (GetArena() == nullptr && global_id_ != nullptr) {
    delete global_id_;
  }
  global_id_ = nullptr;
}
inline const ::artemis::proto::prediction::dataset::LaneNodeGlobalId& LaneNode::_internal_global_id() const {
  const ::artemis::proto::prediction::dataset::LaneNodeGlobalId* p = global_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::artemis::proto::prediction::dataset::LaneNodeGlobalId&>(
      ::artemis::proto::prediction::dataset::_LaneNodeGlobalId_default_instance_);
}
inline const ::artemis::proto::prediction::dataset::LaneNodeGlobalId& LaneNode::global_id() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneNode.global_id)
  return _internal_global_id();
}
inline void LaneNode::unsafe_arena_set_allocated_global_id(
    ::artemis::proto::prediction::dataset::LaneNodeGlobalId* global_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(global_id_);
  }
  global_id_ = global_id;
  if (global_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:artemis.proto.prediction.dataset.LaneNode.global_id)
}
inline ::artemis::proto::prediction::dataset::LaneNodeGlobalId* LaneNode::release_global_id() {
  
  ::artemis::proto::prediction::dataset::LaneNodeGlobalId* temp = global_id_;
  global_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::artemis::proto::prediction::dataset::LaneNodeGlobalId* LaneNode::unsafe_arena_release_global_id() {
  // @@protoc_insertion_point(field_release:artemis.proto.prediction.dataset.LaneNode.global_id)
  
  ::artemis::proto::prediction::dataset::LaneNodeGlobalId* temp = global_id_;
  global_id_ = nullptr;
  return temp;
}
inline ::artemis::proto::prediction::dataset::LaneNodeGlobalId* LaneNode::_internal_mutable_global_id() {
  
  if (global_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::artemis::proto::prediction::dataset::LaneNodeGlobalId>(GetArena());
    global_id_ = p;
  }
  return global_id_;
}
inline ::artemis::proto::prediction::dataset::LaneNodeGlobalId* LaneNode::mutable_global_id() {
  // @@protoc_insertion_point(field_mutable:artemis.proto.prediction.dataset.LaneNode.global_id)
  return _internal_mutable_global_id();
}
inline void LaneNode::set_allocated_global_id(::artemis::proto::prediction::dataset::LaneNodeGlobalId* global_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete global_id_;
  }
  if (global_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(global_id);
    if (message_arena != submessage_arena) {
      global_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_id, submessage_arena);
    }
    
  } else {
    
  }
  global_id_ = global_id;
  // @@protoc_insertion_point(field_set_allocated:artemis.proto.prediction.dataset.LaneNode.global_id)
}

// int32 local_id = 2;
inline void LaneNode::clear_local_id() {
  local_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNode::_internal_local_id() const {
  return local_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNode::local_id() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneNode.local_id)
  return _internal_local_id();
}
inline void LaneNode::_internal_set_local_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  local_id_ = value;
}
inline void LaneNode::set_local_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_local_id(value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.LaneNode.local_id)
}

// .artemis.proto.prediction.dataset.LaneNodeAttribute attribute = 3;
inline bool LaneNode::_internal_has_attribute() const {
  return this != internal_default_instance() && attribute_ != nullptr;
}
inline bool LaneNode::has_attribute() const {
  return _internal_has_attribute();
}
inline void LaneNode::clear_attribute() {
  if (GetArena() == nullptr && attribute_ != nullptr) {
    delete attribute_;
  }
  attribute_ = nullptr;
}
inline const ::artemis::proto::prediction::dataset::LaneNodeAttribute& LaneNode::_internal_attribute() const {
  const ::artemis::proto::prediction::dataset::LaneNodeAttribute* p = attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::artemis::proto::prediction::dataset::LaneNodeAttribute&>(
      ::artemis::proto::prediction::dataset::_LaneNodeAttribute_default_instance_);
}
inline const ::artemis::proto::prediction::dataset::LaneNodeAttribute& LaneNode::attribute() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneNode.attribute)
  return _internal_attribute();
}
inline void LaneNode::unsafe_arena_set_allocated_attribute(
    ::artemis::proto::prediction::dataset::LaneNodeAttribute* attribute) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attribute_);
  }
  attribute_ = attribute;
  if (attribute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:artemis.proto.prediction.dataset.LaneNode.attribute)
}
inline ::artemis::proto::prediction::dataset::LaneNodeAttribute* LaneNode::release_attribute() {
  
  ::artemis::proto::prediction::dataset::LaneNodeAttribute* temp = attribute_;
  attribute_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::artemis::proto::prediction::dataset::LaneNodeAttribute* LaneNode::unsafe_arena_release_attribute() {
  // @@protoc_insertion_point(field_release:artemis.proto.prediction.dataset.LaneNode.attribute)
  
  ::artemis::proto::prediction::dataset::LaneNodeAttribute* temp = attribute_;
  attribute_ = nullptr;
  return temp;
}
inline ::artemis::proto::prediction::dataset::LaneNodeAttribute* LaneNode::_internal_mutable_attribute() {
  
  if (attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::artemis::proto::prediction::dataset::LaneNodeAttribute>(GetArena());
    attribute_ = p;
  }
  return attribute_;
}
inline ::artemis::proto::prediction::dataset::LaneNodeAttribute* LaneNode::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable:artemis.proto.prediction.dataset.LaneNode.attribute)
  return _internal_mutable_attribute();
}
inline void LaneNode::set_allocated_attribute(::artemis::proto::prediction::dataset::LaneNodeAttribute* attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attribute_;
  }
  if (attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attribute);
    if (message_arena != submessage_arena) {
      attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attribute, submessage_arena);
    }
    
  } else {
    
  }
  attribute_ = attribute;
  // @@protoc_insertion_point(field_set_allocated:artemis.proto.prediction.dataset.LaneNode.attribute)
}

// repeated int32 predecessors = 4;
inline int LaneNode::_internal_predecessors_size() const {
  return predecessors_.size();
}
inline int LaneNode::predecessors_size() const {
  return _internal_predecessors_size();
}
inline void LaneNode::clear_predecessors() {
  predecessors_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNode::_internal_predecessors(int index) const {
  return predecessors_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNode::predecessors(int index) const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneNode.predecessors)
  return _internal_predecessors(index);
}
inline void LaneNode::set_predecessors(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  predecessors_.Set(index, value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.LaneNode.predecessors)
}
inline void LaneNode::_internal_add_predecessors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  predecessors_.Add(value);
}
inline void LaneNode::add_predecessors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_predecessors(value);
  // @@protoc_insertion_point(field_add:artemis.proto.prediction.dataset.LaneNode.predecessors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LaneNode::_internal_predecessors() const {
  return predecessors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LaneNode::predecessors() const {
  // @@protoc_insertion_point(field_list:artemis.proto.prediction.dataset.LaneNode.predecessors)
  return _internal_predecessors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LaneNode::_internal_mutable_predecessors() {
  return &predecessors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LaneNode::mutable_predecessors() {
  // @@protoc_insertion_point(field_mutable_list:artemis.proto.prediction.dataset.LaneNode.predecessors)
  return _internal_mutable_predecessors();
}

// repeated int32 successors = 5;
inline int LaneNode::_internal_successors_size() const {
  return successors_.size();
}
inline int LaneNode::successors_size() const {
  return _internal_successors_size();
}
inline void LaneNode::clear_successors() {
  successors_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNode::_internal_successors(int index) const {
  return successors_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNode::successors(int index) const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneNode.successors)
  return _internal_successors(index);
}
inline void LaneNode::set_successors(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  successors_.Set(index, value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.LaneNode.successors)
}
inline void LaneNode::_internal_add_successors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  successors_.Add(value);
}
inline void LaneNode::add_successors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_successors(value);
  // @@protoc_insertion_point(field_add:artemis.proto.prediction.dataset.LaneNode.successors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LaneNode::_internal_successors() const {
  return successors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LaneNode::successors() const {
  // @@protoc_insertion_point(field_list:artemis.proto.prediction.dataset.LaneNode.successors)
  return _internal_successors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LaneNode::_internal_mutable_successors() {
  return &successors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LaneNode::mutable_successors() {
  // @@protoc_insertion_point(field_mutable_list:artemis.proto.prediction.dataset.LaneNode.successors)
  return _internal_mutable_successors();
}

// int32 left_neighbour = 6;
inline void LaneNode::clear_left_neighbour() {
  left_neighbour_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNode::_internal_left_neighbour() const {
  return left_neighbour_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNode::left_neighbour() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneNode.left_neighbour)
  return _internal_left_neighbour();
}
inline void LaneNode::_internal_set_left_neighbour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  left_neighbour_ = value;
}
inline void LaneNode::set_left_neighbour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left_neighbour(value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.LaneNode.left_neighbour)
}

// int32 right_neighbour = 7;
inline void LaneNode::clear_right_neighbour() {
  right_neighbour_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNode::_internal_right_neighbour() const {
  return right_neighbour_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNode::right_neighbour() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneNode.right_neighbour)
  return _internal_right_neighbour();
}
inline void LaneNode::_internal_set_right_neighbour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  right_neighbour_ = value;
}
inline void LaneNode::set_right_neighbour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_right_neighbour(value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.LaneNode.right_neighbour)
}

// int32 father_component = 8;
inline void LaneNode::clear_father_component() {
  father_component_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNode::_internal_father_component() const {
  return father_component_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneNode::father_component() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneNode.father_component)
  return _internal_father_component();
}
inline void LaneNode::_internal_set_father_component(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  father_component_ = value;
}
inline void LaneNode::set_father_component(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_father_component(value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.LaneNode.father_component)
}

// -------------------------------------------------------------------

// LaneComponent

// int32 id = 1;
inline void LaneComponent::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneComponent::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneComponent::id() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneComponent.id)
  return _internal_id();
}
inline void LaneComponent::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void LaneComponent::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.LaneComponent.id)
}

// repeated int32 son_nodes = 2;
inline int LaneComponent::_internal_son_nodes_size() const {
  return son_nodes_.size();
}
inline int LaneComponent::son_nodes_size() const {
  return _internal_son_nodes_size();
}
inline void LaneComponent::clear_son_nodes() {
  son_nodes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneComponent::_internal_son_nodes(int index) const {
  return son_nodes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneComponent::son_nodes(int index) const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneComponent.son_nodes)
  return _internal_son_nodes(index);
}
inline void LaneComponent::set_son_nodes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  son_nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.LaneComponent.son_nodes)
}
inline void LaneComponent::_internal_add_son_nodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  son_nodes_.Add(value);
}
inline void LaneComponent::add_son_nodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_son_nodes(value);
  // @@protoc_insertion_point(field_add:artemis.proto.prediction.dataset.LaneComponent.son_nodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LaneComponent::_internal_son_nodes() const {
  return son_nodes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LaneComponent::son_nodes() const {
  // @@protoc_insertion_point(field_list:artemis.proto.prediction.dataset.LaneComponent.son_nodes)
  return _internal_son_nodes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LaneComponent::_internal_mutable_son_nodes() {
  return &son_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LaneComponent::mutable_son_nodes() {
  // @@protoc_insertion_point(field_mutable_list:artemis.proto.prediction.dataset.LaneComponent.son_nodes)
  return _internal_mutable_son_nodes();
}

// repeated int32 predecessors = 3;
inline int LaneComponent::_internal_predecessors_size() const {
  return predecessors_.size();
}
inline int LaneComponent::predecessors_size() const {
  return _internal_predecessors_size();
}
inline void LaneComponent::clear_predecessors() {
  predecessors_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneComponent::_internal_predecessors(int index) const {
  return predecessors_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneComponent::predecessors(int index) const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneComponent.predecessors)
  return _internal_predecessors(index);
}
inline void LaneComponent::set_predecessors(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  predecessors_.Set(index, value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.LaneComponent.predecessors)
}
inline void LaneComponent::_internal_add_predecessors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  predecessors_.Add(value);
}
inline void LaneComponent::add_predecessors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_predecessors(value);
  // @@protoc_insertion_point(field_add:artemis.proto.prediction.dataset.LaneComponent.predecessors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LaneComponent::_internal_predecessors() const {
  return predecessors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LaneComponent::predecessors() const {
  // @@protoc_insertion_point(field_list:artemis.proto.prediction.dataset.LaneComponent.predecessors)
  return _internal_predecessors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LaneComponent::_internal_mutable_predecessors() {
  return &predecessors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LaneComponent::mutable_predecessors() {
  // @@protoc_insertion_point(field_mutable_list:artemis.proto.prediction.dataset.LaneComponent.predecessors)
  return _internal_mutable_predecessors();
}

// repeated int32 successors = 4;
inline int LaneComponent::_internal_successors_size() const {
  return successors_.size();
}
inline int LaneComponent::successors_size() const {
  return _internal_successors_size();
}
inline void LaneComponent::clear_successors() {
  successors_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneComponent::_internal_successors(int index) const {
  return successors_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneComponent::successors(int index) const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneComponent.successors)
  return _internal_successors(index);
}
inline void LaneComponent::set_successors(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  successors_.Set(index, value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.LaneComponent.successors)
}
inline void LaneComponent::_internal_add_successors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  successors_.Add(value);
}
inline void LaneComponent::add_successors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_successors(value);
  // @@protoc_insertion_point(field_add:artemis.proto.prediction.dataset.LaneComponent.successors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LaneComponent::_internal_successors() const {
  return successors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LaneComponent::successors() const {
  // @@protoc_insertion_point(field_list:artemis.proto.prediction.dataset.LaneComponent.successors)
  return _internal_successors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LaneComponent::_internal_mutable_successors() {
  return &successors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LaneComponent::mutable_successors() {
  // @@protoc_insertion_point(field_mutable_list:artemis.proto.prediction.dataset.LaneComponent.successors)
  return _internal_mutable_successors();
}

// -------------------------------------------------------------------

// LaneGraph

// repeated .artemis.proto.prediction.dataset.LaneNode lane_nodes = 1;
inline int LaneGraph::_internal_lane_nodes_size() const {
  return lane_nodes_.size();
}
inline int LaneGraph::lane_nodes_size() const {
  return _internal_lane_nodes_size();
}
inline void LaneGraph::clear_lane_nodes() {
  lane_nodes_.Clear();
}
inline ::artemis::proto::prediction::dataset::LaneNode* LaneGraph::mutable_lane_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:artemis.proto.prediction.dataset.LaneGraph.lane_nodes)
  return lane_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::LaneNode >*
LaneGraph::mutable_lane_nodes() {
  // @@protoc_insertion_point(field_mutable_list:artemis.proto.prediction.dataset.LaneGraph.lane_nodes)
  return &lane_nodes_;
}
inline const ::artemis::proto::prediction::dataset::LaneNode& LaneGraph::_internal_lane_nodes(int index) const {
  return lane_nodes_.Get(index);
}
inline const ::artemis::proto::prediction::dataset::LaneNode& LaneGraph::lane_nodes(int index) const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneGraph.lane_nodes)
  return _internal_lane_nodes(index);
}
inline ::artemis::proto::prediction::dataset::LaneNode* LaneGraph::_internal_add_lane_nodes() {
  return lane_nodes_.Add();
}
inline ::artemis::proto::prediction::dataset::LaneNode* LaneGraph::add_lane_nodes() {
  // @@protoc_insertion_point(field_add:artemis.proto.prediction.dataset.LaneGraph.lane_nodes)
  return _internal_add_lane_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::LaneNode >&
LaneGraph::lane_nodes() const {
  // @@protoc_insertion_point(field_list:artemis.proto.prediction.dataset.LaneGraph.lane_nodes)
  return lane_nodes_;
}

// repeated .artemis.proto.prediction.dataset.LaneComponent lane_components = 2;
inline int LaneGraph::_internal_lane_components_size() const {
  return lane_components_.size();
}
inline int LaneGraph::lane_components_size() const {
  return _internal_lane_components_size();
}
inline void LaneGraph::clear_lane_components() {
  lane_components_.Clear();
}
inline ::artemis::proto::prediction::dataset::LaneComponent* LaneGraph::mutable_lane_components(int index) {
  // @@protoc_insertion_point(field_mutable:artemis.proto.prediction.dataset.LaneGraph.lane_components)
  return lane_components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::LaneComponent >*
LaneGraph::mutable_lane_components() {
  // @@protoc_insertion_point(field_mutable_list:artemis.proto.prediction.dataset.LaneGraph.lane_components)
  return &lane_components_;
}
inline const ::artemis::proto::prediction::dataset::LaneComponent& LaneGraph::_internal_lane_components(int index) const {
  return lane_components_.Get(index);
}
inline const ::artemis::proto::prediction::dataset::LaneComponent& LaneGraph::lane_components(int index) const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.LaneGraph.lane_components)
  return _internal_lane_components(index);
}
inline ::artemis::proto::prediction::dataset::LaneComponent* LaneGraph::_internal_add_lane_components() {
  return lane_components_.Add();
}
inline ::artemis::proto::prediction::dataset::LaneComponent* LaneGraph::add_lane_components() {
  // @@protoc_insertion_point(field_add:artemis.proto.prediction.dataset.LaneGraph.lane_components)
  return _internal_add_lane_components();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::LaneComponent >&
LaneGraph::lane_components() const {
  // @@protoc_insertion_point(field_list:artemis.proto.prediction.dataset.LaneGraph.lane_components)
  return lane_components_;
}

// -------------------------------------------------------------------

// Sample

// repeated .artemis.proto.prediction.dataset.Trajectory trajectories = 1;
inline int Sample::_internal_trajectories_size() const {
  return trajectories_.size();
}
inline int Sample::trajectories_size() const {
  return _internal_trajectories_size();
}
inline void Sample::clear_trajectories() {
  trajectories_.Clear();
}
inline ::artemis::proto::prediction::dataset::Trajectory* Sample::mutable_trajectories(int index) {
  // @@protoc_insertion_point(field_mutable:artemis.proto.prediction.dataset.Sample.trajectories)
  return trajectories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::Trajectory >*
Sample::mutable_trajectories() {
  // @@protoc_insertion_point(field_mutable_list:artemis.proto.prediction.dataset.Sample.trajectories)
  return &trajectories_;
}
inline const ::artemis::proto::prediction::dataset::Trajectory& Sample::_internal_trajectories(int index) const {
  return trajectories_.Get(index);
}
inline const ::artemis::proto::prediction::dataset::Trajectory& Sample::trajectories(int index) const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.Sample.trajectories)
  return _internal_trajectories(index);
}
inline ::artemis::proto::prediction::dataset::Trajectory* Sample::_internal_add_trajectories() {
  return trajectories_.Add();
}
inline ::artemis::proto::prediction::dataset::Trajectory* Sample::add_trajectories() {
  // @@protoc_insertion_point(field_add:artemis.proto.prediction.dataset.Sample.trajectories)
  return _internal_add_trajectories();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artemis::proto::prediction::dataset::Trajectory >&
Sample::trajectories() const {
  // @@protoc_insertion_point(field_list:artemis.proto.prediction.dataset.Sample.trajectories)
  return trajectories_;
}

// .artemis.proto.prediction.dataset.LaneGraph lane_graph = 2;
inline bool Sample::_internal_has_lane_graph() const {
  return this != internal_default_instance() && lane_graph_ != nullptr;
}
inline bool Sample::has_lane_graph() const {
  return _internal_has_lane_graph();
}
inline void Sample::clear_lane_graph() {
  if (GetArena() == nullptr && lane_graph_ != nullptr) {
    delete lane_graph_;
  }
  lane_graph_ = nullptr;
}
inline const ::artemis::proto::prediction::dataset::LaneGraph& Sample::_internal_lane_graph() const {
  const ::artemis::proto::prediction::dataset::LaneGraph* p = lane_graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::artemis::proto::prediction::dataset::LaneGraph&>(
      ::artemis::proto::prediction::dataset::_LaneGraph_default_instance_);
}
inline const ::artemis::proto::prediction::dataset::LaneGraph& Sample::lane_graph() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.Sample.lane_graph)
  return _internal_lane_graph();
}
inline void Sample::unsafe_arena_set_allocated_lane_graph(
    ::artemis::proto::prediction::dataset::LaneGraph* lane_graph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lane_graph_);
  }
  lane_graph_ = lane_graph;
  if (lane_graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:artemis.proto.prediction.dataset.Sample.lane_graph)
}
inline ::artemis::proto::prediction::dataset::LaneGraph* Sample::release_lane_graph() {
  
  ::artemis::proto::prediction::dataset::LaneGraph* temp = lane_graph_;
  lane_graph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::artemis::proto::prediction::dataset::LaneGraph* Sample::unsafe_arena_release_lane_graph() {
  // @@protoc_insertion_point(field_release:artemis.proto.prediction.dataset.Sample.lane_graph)
  
  ::artemis::proto::prediction::dataset::LaneGraph* temp = lane_graph_;
  lane_graph_ = nullptr;
  return temp;
}
inline ::artemis::proto::prediction::dataset::LaneGraph* Sample::_internal_mutable_lane_graph() {
  
  if (lane_graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::artemis::proto::prediction::dataset::LaneGraph>(GetArena());
    lane_graph_ = p;
  }
  return lane_graph_;
}
inline ::artemis::proto::prediction::dataset::LaneGraph* Sample::mutable_lane_graph() {
  // @@protoc_insertion_point(field_mutable:artemis.proto.prediction.dataset.Sample.lane_graph)
  return _internal_mutable_lane_graph();
}
inline void Sample::set_allocated_lane_graph(::artemis::proto::prediction::dataset::LaneGraph* lane_graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lane_graph_;
  }
  if (lane_graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lane_graph);
    if (message_arena != submessage_arena) {
      lane_graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_graph, submessage_arena);
    }
    
  } else {
    
  }
  lane_graph_ = lane_graph;
  // @@protoc_insertion_point(field_set_allocated:artemis.proto.prediction.dataset.Sample.lane_graph)
}

// int32 attention = 3;
inline void Sample::clear_attention() {
  attention_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sample::_internal_attention() const {
  return attention_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sample::attention() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.Sample.attention)
  return _internal_attention();
}
inline void Sample::_internal_set_attention(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attention_ = value;
}
inline void Sample::set_attention(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attention(value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.Sample.attention)
}

// int32 intention = 4;
inline void Sample::clear_intention() {
  intention_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sample::_internal_intention() const {
  return intention_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sample::intention() const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.Sample.intention)
  return _internal_intention();
}
inline void Sample::_internal_set_intention(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  intention_ = value;
}
inline void Sample::set_intention(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_intention(value);
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.Sample.intention)
}

// -------------------------------------------------------------------

// Metadata

// repeated string sequence_name_list = 1;
inline int Metadata::_internal_sequence_name_list_size() const {
  return sequence_name_list_.size();
}
inline int Metadata::sequence_name_list_size() const {
  return _internal_sequence_name_list_size();
}
inline void Metadata::clear_sequence_name_list() {
  sequence_name_list_.Clear();
}
inline std::string* Metadata::add_sequence_name_list() {
  // @@protoc_insertion_point(field_add_mutable:artemis.proto.prediction.dataset.Metadata.sequence_name_list)
  return _internal_add_sequence_name_list();
}
inline const std::string& Metadata::_internal_sequence_name_list(int index) const {
  return sequence_name_list_.Get(index);
}
inline const std::string& Metadata::sequence_name_list(int index) const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.Metadata.sequence_name_list)
  return _internal_sequence_name_list(index);
}
inline std::string* Metadata::mutable_sequence_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:artemis.proto.prediction.dataset.Metadata.sequence_name_list)
  return sequence_name_list_.Mutable(index);
}
inline void Metadata::set_sequence_name_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.Metadata.sequence_name_list)
  sequence_name_list_.Mutable(index)->assign(value);
}
inline void Metadata::set_sequence_name_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.Metadata.sequence_name_list)
  sequence_name_list_.Mutable(index)->assign(std::move(value));
}
inline void Metadata::set_sequence_name_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sequence_name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artemis.proto.prediction.dataset.Metadata.sequence_name_list)
}
inline void Metadata::set_sequence_name_list(int index, const char* value, size_t size) {
  sequence_name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artemis.proto.prediction.dataset.Metadata.sequence_name_list)
}
inline std::string* Metadata::_internal_add_sequence_name_list() {
  return sequence_name_list_.Add();
}
inline void Metadata::add_sequence_name_list(const std::string& value) {
  sequence_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artemis.proto.prediction.dataset.Metadata.sequence_name_list)
}
inline void Metadata::add_sequence_name_list(std::string&& value) {
  sequence_name_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:artemis.proto.prediction.dataset.Metadata.sequence_name_list)
}
inline void Metadata::add_sequence_name_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sequence_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artemis.proto.prediction.dataset.Metadata.sequence_name_list)
}
inline void Metadata::add_sequence_name_list(const char* value, size_t size) {
  sequence_name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artemis.proto.prediction.dataset.Metadata.sequence_name_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Metadata::sequence_name_list() const {
  // @@protoc_insertion_point(field_list:artemis.proto.prediction.dataset.Metadata.sequence_name_list)
  return sequence_name_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Metadata::mutable_sequence_name_list() {
  // @@protoc_insertion_point(field_mutable_list:artemis.proto.prediction.dataset.Metadata.sequence_name_list)
  return &sequence_name_list_;
}

// repeated string sample_name_list = 2;
inline int Metadata::_internal_sample_name_list_size() const {
  return sample_name_list_.size();
}
inline int Metadata::sample_name_list_size() const {
  return _internal_sample_name_list_size();
}
inline void Metadata::clear_sample_name_list() {
  sample_name_list_.Clear();
}
inline std::string* Metadata::add_sample_name_list() {
  // @@protoc_insertion_point(field_add_mutable:artemis.proto.prediction.dataset.Metadata.sample_name_list)
  return _internal_add_sample_name_list();
}
inline const std::string& Metadata::_internal_sample_name_list(int index) const {
  return sample_name_list_.Get(index);
}
inline const std::string& Metadata::sample_name_list(int index) const {
  // @@protoc_insertion_point(field_get:artemis.proto.prediction.dataset.Metadata.sample_name_list)
  return _internal_sample_name_list(index);
}
inline std::string* Metadata::mutable_sample_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:artemis.proto.prediction.dataset.Metadata.sample_name_list)
  return sample_name_list_.Mutable(index);
}
inline void Metadata::set_sample_name_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.Metadata.sample_name_list)
  sample_name_list_.Mutable(index)->assign(value);
}
inline void Metadata::set_sample_name_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:artemis.proto.prediction.dataset.Metadata.sample_name_list)
  sample_name_list_.Mutable(index)->assign(std::move(value));
}
inline void Metadata::set_sample_name_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sample_name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artemis.proto.prediction.dataset.Metadata.sample_name_list)
}
inline void Metadata::set_sample_name_list(int index, const char* value, size_t size) {
  sample_name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artemis.proto.prediction.dataset.Metadata.sample_name_list)
}
inline std::string* Metadata::_internal_add_sample_name_list() {
  return sample_name_list_.Add();
}
inline void Metadata::add_sample_name_list(const std::string& value) {
  sample_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artemis.proto.prediction.dataset.Metadata.sample_name_list)
}
inline void Metadata::add_sample_name_list(std::string&& value) {
  sample_name_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:artemis.proto.prediction.dataset.Metadata.sample_name_list)
}
inline void Metadata::add_sample_name_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sample_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artemis.proto.prediction.dataset.Metadata.sample_name_list)
}
inline void Metadata::add_sample_name_list(const char* value, size_t size) {
  sample_name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artemis.proto.prediction.dataset.Metadata.sample_name_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Metadata::sample_name_list() const {
  // @@protoc_insertion_point(field_list:artemis.proto.prediction.dataset.Metadata.sample_name_list)
  return sample_name_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Metadata::mutable_sample_name_list() {
  // @@protoc_insertion_point(field_mutable_list:artemis.proto.prediction.dataset.Metadata.sample_name_list)
  return &sample_name_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dataset
}  // namespace prediction
}  // namespace proto
}  // namespace artemis

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::artemis::proto::prediction::dataset::ActorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artemis::proto::prediction::dataset::ActorType>() {
  return ::artemis::proto::prediction::dataset::ActorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_prediction_5fdataset_2eproto
